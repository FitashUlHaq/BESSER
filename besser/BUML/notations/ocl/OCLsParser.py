# Generated from OCLs.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,82,953,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        1,0,1,0,5,0,31,8,0,10,0,12,0,34,9,0,1,1,1,1,1,1,1,1,3,1,40,8,1,1,
        1,3,1,43,8,1,1,1,5,1,46,8,1,10,1,12,1,49,9,1,1,1,3,1,52,8,1,1,1,
        3,1,55,8,1,1,1,3,1,58,8,1,1,1,3,1,61,8,1,1,1,3,1,64,8,1,1,1,3,1,
        67,8,1,1,1,3,1,70,8,1,1,1,3,1,73,8,1,1,1,3,1,76,8,1,1,1,3,1,79,8,
        1,1,1,3,1,82,8,1,1,1,3,1,85,8,1,1,2,1,2,3,2,89,8,2,1,2,1,2,1,2,3,
        2,94,8,2,1,3,1,3,1,3,3,3,99,8,3,1,3,1,3,3,3,103,8,3,1,3,3,3,106,
        8,3,5,3,108,8,3,10,3,12,3,111,9,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,119,
        8,3,10,3,12,3,122,9,3,1,3,1,3,1,3,1,3,3,3,128,8,3,5,3,130,8,3,10,
        3,12,3,133,9,3,1,3,3,3,136,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,3,4,147,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,169,8,5,1,6,1,6,1,7,3,7,174,8,
        7,1,7,1,7,3,7,178,8,7,1,7,1,7,3,7,182,8,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,3,7,192,8,7,1,7,1,7,1,7,5,7,197,8,7,10,7,12,7,200,9,7,
        1,7,1,7,1,7,1,7,1,7,1,7,3,7,208,8,7,1,7,1,7,1,7,5,7,213,8,7,10,7,
        12,7,216,9,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,224,8,7,1,7,1,7,1,7,5,7,
        229,8,7,10,7,12,7,232,9,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,240,8,7,1,
        7,3,7,243,8,7,1,7,1,7,5,7,247,8,7,10,7,12,7,250,9,7,1,7,1,7,1,7,
        1,7,1,7,3,7,257,8,7,1,7,5,7,260,8,7,10,7,12,7,263,9,7,1,7,3,7,266,
        8,7,1,7,1,7,5,7,270,8,7,10,7,12,7,273,9,7,1,7,1,7,1,7,1,7,1,7,3,
        7,280,8,7,1,7,5,7,283,8,7,10,7,12,7,286,9,7,1,7,3,7,289,8,7,1,7,
        1,7,5,7,293,8,7,10,7,12,7,296,9,7,1,7,1,7,1,7,1,7,1,7,3,7,303,8,
        7,1,7,5,7,306,8,7,10,7,12,7,309,9,7,1,7,3,7,312,8,7,1,7,1,7,1,7,
        1,7,1,7,3,7,319,8,7,1,7,5,7,322,8,7,10,7,12,7,325,9,7,1,7,3,7,328,
        8,7,1,7,1,7,1,7,1,7,1,7,3,7,335,8,7,1,7,5,7,338,8,7,10,7,12,7,341,
        9,7,1,7,3,7,344,8,7,1,7,5,7,347,8,7,10,7,12,7,350,9,7,1,7,1,7,5,
        7,354,8,7,10,7,12,7,357,9,7,1,7,5,7,360,8,7,10,7,12,7,363,9,7,1,
        7,3,7,366,8,7,1,7,1,7,3,7,370,8,7,1,7,3,7,373,8,7,5,7,375,8,7,10,
        7,12,7,378,9,7,1,7,5,7,381,8,7,10,7,12,7,384,9,7,1,7,5,7,387,8,7,
        10,7,12,7,390,9,7,1,7,3,7,393,8,7,1,7,3,7,396,8,7,1,7,5,7,399,8,
        7,10,7,12,7,402,9,7,1,7,1,7,5,7,406,8,7,10,7,12,7,409,9,7,1,7,5,
        7,412,8,7,10,7,12,7,415,9,7,1,7,3,7,418,8,7,1,7,1,7,3,7,422,8,7,
        1,7,3,7,425,8,7,5,7,427,8,7,10,7,12,7,430,9,7,1,7,5,7,433,8,7,10,
        7,12,7,436,9,7,1,7,5,7,439,8,7,10,7,12,7,442,9,7,1,7,3,7,445,8,7,
        1,7,3,7,448,8,7,1,7,1,7,4,7,452,8,7,11,7,12,7,453,1,7,3,7,457,8,
        7,1,7,4,7,460,8,7,11,7,12,7,461,1,7,3,7,465,8,7,1,7,3,7,468,8,7,
        1,7,5,7,471,8,7,10,7,12,7,474,9,7,1,7,1,7,1,7,3,7,479,8,7,1,7,1,
        7,3,7,483,8,7,1,7,3,7,486,8,7,5,7,488,8,7,10,7,12,7,491,9,7,1,7,
        1,7,5,7,495,8,7,10,7,12,7,498,9,7,1,7,3,7,501,8,7,1,7,3,7,504,8,
        7,1,7,5,7,507,8,7,10,7,12,7,510,9,7,1,7,1,7,5,7,514,8,7,10,7,12,
        7,517,9,7,1,7,5,7,520,8,7,10,7,12,7,523,9,7,1,7,3,7,526,8,7,1,7,
        1,7,3,7,530,8,7,1,7,3,7,533,8,7,5,7,535,8,7,10,7,12,7,538,9,7,1,
        7,5,7,541,8,7,10,7,12,7,544,9,7,1,7,5,7,547,8,7,10,7,12,7,550,9,
        7,1,7,3,7,553,8,7,1,7,1,7,3,7,557,8,7,1,7,5,7,560,8,7,10,7,12,7,
        563,9,7,1,7,1,7,5,7,567,8,7,10,7,12,7,570,9,7,1,7,5,7,573,8,7,10,
        7,12,7,576,9,7,1,7,3,7,579,8,7,1,7,1,7,3,7,583,8,7,1,7,3,7,586,8,
        7,5,7,588,8,7,10,7,12,7,591,9,7,1,7,5,7,594,8,7,10,7,12,7,597,9,
        7,1,7,5,7,600,8,7,10,7,12,7,603,9,7,1,7,3,7,606,8,7,1,7,3,7,609,
        8,7,1,7,5,7,612,8,7,10,7,12,7,615,9,7,1,7,1,7,5,7,619,8,7,10,7,12,
        7,622,9,7,1,7,5,7,625,8,7,10,7,12,7,628,9,7,1,7,3,7,631,8,7,1,7,
        1,7,3,7,635,8,7,1,7,3,7,638,8,7,5,7,640,8,7,10,7,12,7,643,9,7,1,
        7,5,7,646,8,7,10,7,12,7,649,9,7,1,7,5,7,652,8,7,10,7,12,7,655,9,
        7,1,7,3,7,658,8,7,1,7,1,7,1,7,4,7,663,8,7,11,7,12,7,664,1,7,3,7,
        668,8,7,1,7,1,7,3,7,672,8,7,1,7,3,7,675,8,7,5,7,677,8,7,10,7,12,
        7,680,9,7,1,7,4,7,683,8,7,11,7,12,7,684,1,7,3,7,688,8,7,1,7,1,7,
        1,7,1,7,4,7,694,8,7,11,7,12,7,695,1,7,3,7,699,8,7,1,7,1,7,1,7,1,
        7,3,7,705,8,7,1,7,1,7,3,7,709,8,7,1,7,3,7,712,8,7,5,7,714,8,7,10,
        7,12,7,717,9,7,1,7,4,7,720,8,7,11,7,12,7,721,1,7,3,7,725,8,7,1,7,
        3,7,728,8,7,1,7,1,7,1,7,1,7,1,7,3,7,735,8,7,1,7,3,7,738,8,7,4,7,
        740,8,7,11,7,12,7,741,1,7,1,7,1,7,1,7,3,7,748,8,7,1,7,3,7,751,8,
        7,1,7,1,7,1,7,1,7,1,7,3,7,758,8,7,1,7,1,7,1,7,1,7,1,7,4,7,765,8,
        7,11,7,12,7,766,1,7,3,7,770,8,7,1,7,1,7,1,7,1,7,1,7,3,7,777,8,7,
        1,7,1,7,1,7,1,7,1,7,3,7,784,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,792,
        8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,803,8,7,10,7,12,7,806,
        9,7,1,7,3,7,809,8,7,1,7,1,7,5,7,813,8,7,10,7,12,7,816,9,7,1,7,3,
        7,819,8,7,1,7,3,7,822,8,7,1,7,1,7,4,7,826,8,7,11,7,12,7,827,1,7,
        3,7,831,8,7,1,7,1,7,5,7,835,8,7,10,7,12,7,838,9,7,1,7,5,7,841,8,
        7,10,7,12,7,844,9,7,1,7,1,7,3,7,848,8,7,1,7,3,7,851,8,7,1,7,1,7,
        3,7,855,8,7,1,7,1,7,1,7,1,7,3,7,861,8,7,1,7,3,7,864,8,7,1,7,1,7,
        3,7,868,8,7,1,7,1,7,3,7,872,8,7,1,7,1,7,1,7,3,7,877,8,7,1,7,1,7,
        3,7,881,8,7,1,7,3,7,884,8,7,1,7,1,7,3,7,888,8,7,1,8,1,8,1,8,5,8,
        893,8,8,10,8,12,8,896,9,8,1,8,3,8,899,8,8,1,8,1,8,5,8,903,8,8,10,
        8,12,8,906,9,8,1,8,1,8,1,8,1,8,5,8,912,8,8,10,8,12,8,915,9,8,1,8,
        3,8,918,8,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,3,11,927,8,11,1,11,1,
        11,3,11,931,8,11,1,11,3,11,934,8,11,1,11,3,11,937,8,11,3,11,939,
        8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,949,8,12,1,13,
        1,13,1,13,0,0,14,0,2,4,6,8,10,12,14,16,18,20,22,24,26,0,7,3,0,3,
        4,68,70,76,76,1,0,2,4,1,0,33,34,1,0,6,9,2,0,35,35,46,46,4,0,23,23,
        33,34,36,40,46,51,2,0,72,72,78,80,1172,0,28,1,0,0,0,2,35,1,0,0,0,
        4,86,1,0,0,0,6,135,1,0,0,0,8,146,1,0,0,0,10,168,1,0,0,0,12,170,1,
        0,0,0,14,887,1,0,0,0,16,898,1,0,0,0,18,919,1,0,0,0,20,922,1,0,0,
        0,22,938,1,0,0,0,24,948,1,0,0,0,26,950,1,0,0,0,28,32,3,2,1,0,29,
        31,3,14,7,0,30,29,1,0,0,0,31,34,1,0,0,0,32,30,1,0,0,0,32,33,1,0,
        0,0,33,1,1,0,0,0,34,32,1,0,0,0,35,36,5,1,0,0,36,39,5,77,0,0,37,38,
        5,20,0,0,38,40,3,8,4,0,39,37,1,0,0,0,39,40,1,0,0,0,40,42,1,0,0,0,
        41,43,5,17,0,0,42,41,1,0,0,0,42,43,1,0,0,0,43,47,1,0,0,0,44,46,3,
        4,2,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,
        51,1,0,0,0,49,47,1,0,0,0,50,52,5,18,0,0,51,50,1,0,0,0,51,52,1,0,
        0,0,52,54,1,0,0,0,53,55,5,14,0,0,54,53,1,0,0,0,54,55,1,0,0,0,55,
        57,1,0,0,0,56,58,3,6,3,0,57,56,1,0,0,0,57,58,1,0,0,0,58,60,1,0,0,
        0,59,61,5,20,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,64,
        3,8,4,0,63,62,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,67,5,15,0,0,
        66,65,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,70,5,77,0,0,69,68,1,
        0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,73,5,16,0,0,72,71,1,0,0,0,72,
        73,1,0,0,0,73,75,1,0,0,0,74,76,5,20,0,0,75,74,1,0,0,0,75,76,1,0,
        0,0,76,78,1,0,0,0,77,79,7,0,0,0,78,77,1,0,0,0,78,79,1,0,0,0,79,81,
        1,0,0,0,80,82,5,20,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,84,1,0,0,0,
        83,85,3,14,7,0,84,83,1,0,0,0,84,85,1,0,0,0,85,3,1,0,0,0,86,88,7,
        1,0,0,87,89,5,77,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,
        91,5,20,0,0,91,93,3,14,7,0,92,94,5,19,0,0,93,92,1,0,0,0,93,94,1,
        0,0,0,94,5,1,0,0,0,95,96,5,77,0,0,96,109,5,15,0,0,97,99,5,24,0,0,
        98,97,1,0,0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,102,3,14,7,0,101,
        103,5,24,0,0,102,101,1,0,0,0,102,103,1,0,0,0,103,105,1,0,0,0,104,
        106,5,21,0,0,105,104,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,
        98,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,112,
        1,0,0,0,111,109,1,0,0,0,112,136,5,16,0,0,113,114,5,77,0,0,114,120,
        5,15,0,0,115,116,5,77,0,0,116,117,5,20,0,0,117,119,5,77,0,0,118,
        115,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,
        123,1,0,0,0,122,120,1,0,0,0,123,136,5,16,0,0,124,131,5,15,0,0,125,
        127,5,78,0,0,126,128,5,21,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,
        130,1,0,0,0,129,125,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,
        132,1,0,0,0,132,134,1,0,0,0,133,131,1,0,0,0,134,136,5,16,0,0,135,
        95,1,0,0,0,135,113,1,0,0,0,135,124,1,0,0,0,136,7,1,0,0,0,137,147,
        5,25,0,0,138,147,5,26,0,0,139,147,5,27,0,0,140,147,5,28,0,0,141,
        147,5,10,0,0,142,147,5,11,0,0,143,147,3,10,5,0,144,147,3,12,6,0,
        145,147,5,42,0,0,146,137,1,0,0,0,146,138,1,0,0,0,146,139,1,0,0,0,
        146,140,1,0,0,0,146,141,1,0,0,0,146,142,1,0,0,0,146,143,1,0,0,0,
        146,144,1,0,0,0,146,145,1,0,0,0,147,9,1,0,0,0,148,149,5,42,0,0,149,
        150,5,37,0,0,150,151,3,8,4,0,151,152,5,39,0,0,152,169,1,0,0,0,153,
        154,5,43,0,0,154,155,5,37,0,0,155,156,3,8,4,0,156,157,5,39,0,0,157,
        169,1,0,0,0,158,159,5,44,0,0,159,160,5,37,0,0,160,161,3,8,4,0,161,
        162,5,39,0,0,162,169,1,0,0,0,163,164,5,45,0,0,164,165,5,37,0,0,165,
        166,3,8,4,0,166,167,5,39,0,0,167,169,1,0,0,0,168,148,1,0,0,0,168,
        153,1,0,0,0,168,158,1,0,0,0,168,163,1,0,0,0,169,11,1,0,0,0,170,171,
        5,77,0,0,171,13,1,0,0,0,172,174,7,2,0,0,173,172,1,0,0,0,173,174,
        1,0,0,0,174,175,1,0,0,0,175,177,3,16,8,0,176,178,3,14,7,0,177,176,
        1,0,0,0,177,178,1,0,0,0,178,888,1,0,0,0,179,181,3,18,9,0,180,182,
        3,14,7,0,181,180,1,0,0,0,181,182,1,0,0,0,182,888,1,0,0,0,183,184,
        5,29,0,0,184,888,3,14,7,0,185,186,5,30,0,0,186,888,3,14,7,0,187,
        188,5,31,0,0,188,888,3,14,7,0,189,191,5,32,0,0,190,192,3,14,7,0,
        191,190,1,0,0,0,191,192,1,0,0,0,192,888,1,0,0,0,193,198,3,24,12,
        0,194,195,5,22,0,0,195,197,5,77,0,0,196,194,1,0,0,0,197,200,1,0,
        0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,
        0,0,201,202,5,22,0,0,202,203,5,53,0,0,203,204,5,15,0,0,204,205,3,
        8,4,0,205,207,5,16,0,0,206,208,3,14,7,0,207,206,1,0,0,0,207,208,
        1,0,0,0,208,888,1,0,0,0,209,214,3,24,12,0,210,211,5,22,0,0,211,213,
        5,77,0,0,212,210,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,
        1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,5,22,0,0,218,219,
        5,52,0,0,219,220,5,15,0,0,220,221,3,8,4,0,221,223,5,16,0,0,222,224,
        3,14,7,0,223,222,1,0,0,0,223,224,1,0,0,0,224,888,1,0,0,0,225,230,
        3,24,12,0,226,227,5,22,0,0,227,229,5,77,0,0,228,226,1,0,0,0,229,
        232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,
        230,1,0,0,0,233,234,5,22,0,0,234,235,5,54,0,0,235,236,5,15,0,0,236,
        237,3,8,4,0,237,239,5,16,0,0,238,240,3,14,7,0,239,238,1,0,0,0,239,
        240,1,0,0,0,240,888,1,0,0,0,241,243,3,24,12,0,242,241,1,0,0,0,242,
        243,1,0,0,0,243,248,1,0,0,0,244,245,5,22,0,0,245,247,5,77,0,0,246,
        244,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,
        251,1,0,0,0,250,248,1,0,0,0,251,252,5,75,0,0,252,253,5,56,0,0,253,
        254,5,15,0,0,254,256,5,16,0,0,255,257,3,14,7,0,256,255,1,0,0,0,256,
        257,1,0,0,0,257,261,1,0,0,0,258,260,5,16,0,0,259,258,1,0,0,0,260,
        263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,888,1,0,0,0,263,
        261,1,0,0,0,264,266,3,24,12,0,265,264,1,0,0,0,265,266,1,0,0,0,266,
        271,1,0,0,0,267,268,5,22,0,0,268,270,5,77,0,0,269,267,1,0,0,0,270,
        273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,
        271,1,0,0,0,274,275,5,75,0,0,275,276,5,57,0,0,276,277,5,15,0,0,277,
        279,5,16,0,0,278,280,3,14,7,0,279,278,1,0,0,0,279,280,1,0,0,0,280,
        284,1,0,0,0,281,283,5,16,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,
        282,1,0,0,0,284,285,1,0,0,0,285,888,1,0,0,0,286,284,1,0,0,0,287,
        289,3,24,12,0,288,287,1,0,0,0,288,289,1,0,0,0,289,294,1,0,0,0,290,
        291,5,22,0,0,291,293,5,77,0,0,292,290,1,0,0,0,293,296,1,0,0,0,294,
        292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,294,1,0,0,0,297,
        298,5,75,0,0,298,299,5,58,0,0,299,300,5,15,0,0,300,302,5,16,0,0,
        301,303,3,14,7,0,302,301,1,0,0,0,302,303,1,0,0,0,303,307,1,0,0,0,
        304,306,5,16,0,0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,
        307,308,1,0,0,0,308,888,1,0,0,0,309,307,1,0,0,0,310,312,5,75,0,0,
        311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,59,0,0,
        314,315,5,15,0,0,315,316,3,14,7,0,316,318,5,16,0,0,317,319,3,14,
        7,0,318,317,1,0,0,0,318,319,1,0,0,0,319,323,1,0,0,0,320,322,5,16,
        0,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,
        0,0,324,888,1,0,0,0,325,323,1,0,0,0,326,328,5,75,0,0,327,326,1,0,
        0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,330,5,60,0,0,330,331,5,15,
        0,0,331,332,3,14,7,0,332,334,5,16,0,0,333,335,3,14,7,0,334,333,1,
        0,0,0,334,335,1,0,0,0,335,339,1,0,0,0,336,338,5,16,0,0,337,336,1,
        0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,888,1,
        0,0,0,341,339,1,0,0,0,342,344,5,75,0,0,343,342,1,0,0,0,343,344,1,
        0,0,0,344,348,1,0,0,0,345,347,5,15,0,0,346,345,1,0,0,0,347,350,1,
        0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,348,1,
        0,0,0,351,355,5,44,0,0,352,354,5,17,0,0,353,352,1,0,0,0,354,357,
        1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,361,1,0,0,0,357,355,
        1,0,0,0,358,360,5,15,0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,359,
        1,0,0,0,361,362,1,0,0,0,362,376,1,0,0,0,363,361,1,0,0,0,364,366,
        5,24,0,0,365,364,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,369,
        3,14,7,0,368,370,5,24,0,0,369,368,1,0,0,0,369,370,1,0,0,0,370,372,
        1,0,0,0,371,373,5,21,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,375,
        1,0,0,0,374,365,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,
        1,0,0,0,377,382,1,0,0,0,378,376,1,0,0,0,379,381,5,18,0,0,380,379,
        1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,388,
        1,0,0,0,384,382,1,0,0,0,385,387,5,16,0,0,386,385,1,0,0,0,387,390,
        1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,392,1,0,0,0,390,388,
        1,0,0,0,391,393,3,14,7,0,392,391,1,0,0,0,392,393,1,0,0,0,393,888,
        1,0,0,0,394,396,5,75,0,0,395,394,1,0,0,0,395,396,1,0,0,0,396,400,
        1,0,0,0,397,399,5,15,0,0,398,397,1,0,0,0,399,402,1,0,0,0,400,398,
        1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,400,1,0,0,0,403,407,
        5,61,0,0,404,406,5,17,0,0,405,404,1,0,0,0,406,409,1,0,0,0,407,405,
        1,0,0,0,407,408,1,0,0,0,408,413,1,0,0,0,409,407,1,0,0,0,410,412,
        5,15,0,0,411,410,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,
        1,0,0,0,414,428,1,0,0,0,415,413,1,0,0,0,416,418,5,24,0,0,417,416,
        1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,421,3,14,7,0,420,422,
        5,24,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,425,
        5,21,0,0,424,423,1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,417,
        1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,434,
        1,0,0,0,430,428,1,0,0,0,431,433,5,16,0,0,432,431,1,0,0,0,433,436,
        1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,440,1,0,0,0,436,434,
        1,0,0,0,437,439,5,18,0,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,
        1,0,0,0,440,441,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,443,445,
        3,14,7,0,444,443,1,0,0,0,444,445,1,0,0,0,445,888,1,0,0,0,446,448,
        5,75,0,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,451,
        5,55,0,0,450,452,5,15,0,0,451,450,1,0,0,0,452,453,1,0,0,0,453,451,
        1,0,0,0,453,454,1,0,0,0,454,456,1,0,0,0,455,457,3,14,7,0,456,455,
        1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,460,5,16,0,0,459,458,
        1,0,0,0,460,461,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,464,
        1,0,0,0,463,465,3,14,7,0,464,463,1,0,0,0,464,465,1,0,0,0,465,888,
        1,0,0,0,466,468,5,75,0,0,467,466,1,0,0,0,467,468,1,0,0,0,468,472,
        1,0,0,0,469,471,5,15,0,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,
        1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,472,1,0,0,0,475,476,
        5,45,0,0,476,489,5,17,0,0,477,479,5,24,0,0,478,477,1,0,0,0,478,479,
        1,0,0,0,479,480,1,0,0,0,480,482,3,14,7,0,481,483,5,24,0,0,482,481,
        1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,486,5,21,0,0,485,484,
        1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,478,1,0,0,0,488,491,
        1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,489,
        1,0,0,0,492,496,5,18,0,0,493,495,5,16,0,0,494,493,1,0,0,0,495,498,
        1,0,0,0,496,494,1,0,0,0,496,497,1,0,0,0,497,500,1,0,0,0,498,496,
        1,0,0,0,499,501,3,14,7,0,500,499,1,0,0,0,500,501,1,0,0,0,501,888,
        1,0,0,0,502,504,5,75,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,508,
        1,0,0,0,505,507,5,15,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,
        1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,508,1,0,0,0,511,515,
        5,62,0,0,512,514,5,17,0,0,513,512,1,0,0,0,514,517,1,0,0,0,515,513,
        1,0,0,0,515,516,1,0,0,0,516,521,1,0,0,0,517,515,1,0,0,0,518,520,
        5,15,0,0,519,518,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,
        1,0,0,0,522,536,1,0,0,0,523,521,1,0,0,0,524,526,5,24,0,0,525,524,
        1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,529,3,14,7,0,528,530,
        5,24,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,532,1,0,0,0,531,533,
        5,21,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,534,525,
        1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,542,
        1,0,0,0,538,536,1,0,0,0,539,541,5,18,0,0,540,539,1,0,0,0,541,544,
        1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,548,1,0,0,0,544,542,
        1,0,0,0,545,547,5,16,0,0,546,545,1,0,0,0,547,550,1,0,0,0,548,546,
        1,0,0,0,548,549,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,551,553,
        3,14,7,0,552,551,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,888,
        5,16,0,0,555,557,5,75,0,0,556,555,1,0,0,0,556,557,1,0,0,0,557,561,
        1,0,0,0,558,560,5,15,0,0,559,558,1,0,0,0,560,563,1,0,0,0,561,559,
        1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,561,1,0,0,0,564,568,
        5,42,0,0,565,567,5,15,0,0,566,565,1,0,0,0,567,570,1,0,0,0,568,566,
        1,0,0,0,568,569,1,0,0,0,569,574,1,0,0,0,570,568,1,0,0,0,571,573,
        5,17,0,0,572,571,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,
        1,0,0,0,575,589,1,0,0,0,576,574,1,0,0,0,577,579,5,24,0,0,578,577,
        1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,582,3,14,7,0,581,583,
        5,24,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,586,
        5,21,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,578,
        1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,595,
        1,0,0,0,591,589,1,0,0,0,592,594,5,18,0,0,593,592,1,0,0,0,594,597,
        1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,601,1,0,0,0,597,595,
        1,0,0,0,598,600,5,16,0,0,599,598,1,0,0,0,600,603,1,0,0,0,601,599,
        1,0,0,0,601,602,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,604,606,
        3,14,7,0,605,604,1,0,0,0,605,606,1,0,0,0,606,888,1,0,0,0,607,609,
        5,75,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,613,1,0,0,0,610,612,
        5,15,0,0,611,610,1,0,0,0,612,615,1,0,0,0,613,611,1,0,0,0,613,614,
        1,0,0,0,614,616,1,0,0,0,615,613,1,0,0,0,616,620,5,43,0,0,617,619,
        5,15,0,0,618,617,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,
        1,0,0,0,621,626,1,0,0,0,622,620,1,0,0,0,623,625,5,17,0,0,624,623,
        1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,641,
        1,0,0,0,628,626,1,0,0,0,629,631,5,24,0,0,630,629,1,0,0,0,630,631,
        1,0,0,0,631,632,1,0,0,0,632,634,3,14,7,0,633,635,5,24,0,0,634,633,
        1,0,0,0,634,635,1,0,0,0,635,637,1,0,0,0,636,638,5,21,0,0,637,636,
        1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,630,1,0,0,0,640,643,
        1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,647,1,0,0,0,643,641,
        1,0,0,0,644,646,5,18,0,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,
        1,0,0,0,647,648,1,0,0,0,648,653,1,0,0,0,649,647,1,0,0,0,650,652,
        5,16,0,0,651,650,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,653,654,
        1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,656,658,3,14,7,0,657,656,
        1,0,0,0,657,658,1,0,0,0,658,888,1,0,0,0,659,660,5,75,0,0,660,662,
        5,63,0,0,661,663,5,15,0,0,662,661,1,0,0,0,663,664,1,0,0,0,664,662,
        1,0,0,0,664,665,1,0,0,0,665,678,1,0,0,0,666,668,5,24,0,0,667,666,
        1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,671,3,14,7,0,670,672,
        5,24,0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,675,
        5,21,0,0,674,673,1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,667,
        1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,682,
        1,0,0,0,680,678,1,0,0,0,681,683,5,16,0,0,682,681,1,0,0,0,683,684,
        1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,686,688,
        3,14,7,0,687,686,1,0,0,0,687,688,1,0,0,0,688,888,1,0,0,0,689,690,
        5,75,0,0,690,691,5,64,0,0,691,693,5,15,0,0,692,694,5,16,0,0,693,
        692,1,0,0,0,694,695,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,
        698,1,0,0,0,697,699,3,14,7,0,698,697,1,0,0,0,698,699,1,0,0,0,699,
        888,1,0,0,0,700,701,5,75,0,0,701,702,5,65,0,0,702,715,5,15,0,0,703,
        705,5,24,0,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,
        708,3,14,7,0,707,709,5,24,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,
        711,1,0,0,0,710,712,5,21,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,
        714,1,0,0,0,713,704,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,
        716,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,718,720,5,16,0,0,719,
        718,1,0,0,0,720,721,1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,
        724,1,0,0,0,723,725,3,14,7,0,724,723,1,0,0,0,724,725,1,0,0,0,725,
        888,1,0,0,0,726,728,5,75,0,0,727,726,1,0,0,0,727,728,1,0,0,0,728,
        729,1,0,0,0,729,730,7,3,0,0,730,739,5,15,0,0,731,734,5,77,0,0,732,
        733,5,20,0,0,733,735,5,77,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,
        737,1,0,0,0,736,738,5,21,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,
        740,1,0,0,0,739,731,1,0,0,0,740,741,1,0,0,0,741,739,1,0,0,0,741,
        742,1,0,0,0,742,743,1,0,0,0,743,744,5,41,0,0,744,745,3,14,7,0,745,
        747,5,16,0,0,746,748,3,14,7,0,747,746,1,0,0,0,747,748,1,0,0,0,748,
        888,1,0,0,0,749,751,5,75,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,
        752,1,0,0,0,752,753,7,3,0,0,753,754,5,15,0,0,754,755,3,14,7,0,755,
        757,5,16,0,0,756,758,3,14,7,0,757,756,1,0,0,0,757,758,1,0,0,0,758,
        888,1,0,0,0,759,760,5,75,0,0,760,761,5,66,0,0,761,762,5,15,0,0,762,
        764,3,14,7,0,763,765,5,16,0,0,764,763,1,0,0,0,765,766,1,0,0,0,766,
        764,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,770,3,14,7,0,769,
        768,1,0,0,0,769,770,1,0,0,0,770,888,1,0,0,0,771,772,5,75,0,0,772,
        773,5,67,0,0,773,774,5,15,0,0,774,776,5,16,0,0,775,777,3,14,7,0,
        776,775,1,0,0,0,776,777,1,0,0,0,777,888,1,0,0,0,778,779,5,75,0,0,
        779,780,5,68,0,0,780,781,5,15,0,0,781,783,5,16,0,0,782,784,3,14,
        7,0,783,782,1,0,0,0,783,784,1,0,0,0,784,888,1,0,0,0,785,786,5,75,
        0,0,786,787,5,71,0,0,787,788,5,15,0,0,788,789,3,14,7,0,789,791,5,
        16,0,0,790,792,3,14,7,0,791,790,1,0,0,0,791,792,1,0,0,0,792,888,
        1,0,0,0,793,794,5,76,0,0,794,795,5,20,0,0,795,888,3,14,7,0,796,797,
        5,77,0,0,797,798,5,20,0,0,798,799,5,77,0,0,799,800,5,23,0,0,800,
        888,3,14,7,0,801,803,5,15,0,0,802,801,1,0,0,0,803,806,1,0,0,0,804,
        802,1,0,0,0,804,805,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,807,
        809,3,24,12,0,808,807,1,0,0,0,808,809,1,0,0,0,809,814,1,0,0,0,810,
        811,5,22,0,0,811,813,5,77,0,0,812,810,1,0,0,0,813,816,1,0,0,0,814,
        812,1,0,0,0,814,815,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,817,
        819,3,20,10,0,818,817,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,
        822,3,24,12,0,821,820,1,0,0,0,821,822,1,0,0,0,822,825,1,0,0,0,823,
        824,5,22,0,0,824,826,5,77,0,0,825,823,1,0,0,0,826,827,1,0,0,0,827,
        825,1,0,0,0,827,828,1,0,0,0,828,830,1,0,0,0,829,831,3,14,7,0,830,
        829,1,0,0,0,830,831,1,0,0,0,831,888,1,0,0,0,832,836,3,24,12,0,833,
        835,5,22,0,0,834,833,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,836,
        837,1,0,0,0,837,842,1,0,0,0,838,836,1,0,0,0,839,841,5,77,0,0,840,
        839,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,
        845,1,0,0,0,844,842,1,0,0,0,845,847,3,6,3,0,846,848,3,20,10,0,847,
        846,1,0,0,0,847,848,1,0,0,0,848,850,1,0,0,0,849,851,3,14,7,0,850,
        849,1,0,0,0,850,851,1,0,0,0,851,888,1,0,0,0,852,854,3,20,10,0,853,
        855,3,22,11,0,854,853,1,0,0,0,854,855,1,0,0,0,855,888,1,0,0,0,856,
        857,5,75,0,0,857,888,3,14,7,0,858,860,5,78,0,0,859,861,3,14,7,0,
        860,859,1,0,0,0,860,861,1,0,0,0,861,888,1,0,0,0,862,864,5,75,0,0,
        863,862,1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,867,3,6,3,0,
        866,868,3,14,7,0,867,866,1,0,0,0,867,868,1,0,0,0,868,888,1,0,0,0,
        869,871,3,24,12,0,870,872,3,14,7,0,871,870,1,0,0,0,871,872,1,0,0,
        0,872,888,1,0,0,0,873,874,5,24,0,0,874,876,3,14,7,0,875,877,5,22,
        0,0,876,875,1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,878,880,5,24,
        0,0,879,881,5,22,0,0,880,879,1,0,0,0,880,881,1,0,0,0,881,883,1,0,
        0,0,882,884,3,14,7,0,883,882,1,0,0,0,883,884,1,0,0,0,884,888,1,0,
        0,0,885,886,5,13,0,0,886,888,3,14,7,0,887,173,1,0,0,0,887,179,1,
        0,0,0,887,183,1,0,0,0,887,185,1,0,0,0,887,187,1,0,0,0,887,189,1,
        0,0,0,887,193,1,0,0,0,887,209,1,0,0,0,887,225,1,0,0,0,887,242,1,
        0,0,0,887,265,1,0,0,0,887,288,1,0,0,0,887,311,1,0,0,0,887,327,1,
        0,0,0,887,343,1,0,0,0,887,395,1,0,0,0,887,447,1,0,0,0,887,467,1,
        0,0,0,887,503,1,0,0,0,887,556,1,0,0,0,887,608,1,0,0,0,887,659,1,
        0,0,0,887,689,1,0,0,0,887,700,1,0,0,0,887,727,1,0,0,0,887,750,1,
        0,0,0,887,759,1,0,0,0,887,771,1,0,0,0,887,778,1,0,0,0,887,785,1,
        0,0,0,887,793,1,0,0,0,887,796,1,0,0,0,887,804,1,0,0,0,887,832,1,
        0,0,0,887,852,1,0,0,0,887,856,1,0,0,0,887,858,1,0,0,0,887,863,1,
        0,0,0,887,869,1,0,0,0,887,873,1,0,0,0,887,885,1,0,0,0,888,15,1,0,
        0,0,889,894,3,24,12,0,890,891,5,22,0,0,891,893,5,77,0,0,892,890,
        1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,899,
        1,0,0,0,896,894,1,0,0,0,897,899,5,78,0,0,898,889,1,0,0,0,898,897,
        1,0,0,0,899,904,1,0,0,0,900,901,5,22,0,0,901,903,5,77,0,0,902,900,
        1,0,0,0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,907,
        1,0,0,0,906,904,1,0,0,0,907,917,3,20,10,0,908,913,3,24,12,0,909,
        910,5,22,0,0,910,912,5,77,0,0,911,909,1,0,0,0,912,915,1,0,0,0,913,
        911,1,0,0,0,913,914,1,0,0,0,914,918,1,0,0,0,915,913,1,0,0,0,916,
        918,5,78,0,0,917,908,1,0,0,0,917,916,1,0,0,0,918,17,1,0,0,0,919,
        920,7,4,0,0,920,921,3,14,7,0,921,19,1,0,0,0,922,923,7,5,0,0,923,
        21,1,0,0,0,924,939,5,78,0,0,925,927,5,24,0,0,926,925,1,0,0,0,926,
        927,1,0,0,0,927,928,1,0,0,0,928,930,5,77,0,0,929,931,5,15,0,0,930,
        929,1,0,0,0,930,931,1,0,0,0,931,933,1,0,0,0,932,934,5,16,0,0,933,
        932,1,0,0,0,933,934,1,0,0,0,934,936,1,0,0,0,935,937,5,24,0,0,936,
        935,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,924,1,0,0,0,938,
        926,1,0,0,0,939,23,1,0,0,0,940,949,3,26,13,0,941,949,5,5,0,0,942,
        949,3,6,3,0,943,944,5,15,0,0,944,945,3,14,7,0,945,946,5,16,0,0,946,
        949,1,0,0,0,947,949,5,77,0,0,948,940,1,0,0,0,948,941,1,0,0,0,948,
        942,1,0,0,0,948,943,1,0,0,0,948,947,1,0,0,0,949,25,1,0,0,0,950,951,
        7,6,0,0,951,27,1,0,0,0,182,32,39,42,47,51,54,57,60,63,66,69,72,75,
        78,81,84,88,93,98,102,105,109,120,127,131,135,146,168,173,177,181,
        191,198,207,214,223,230,239,242,248,256,261,265,271,279,284,288,
        294,302,307,311,318,323,327,334,339,343,348,355,361,365,369,372,
        376,382,388,392,395,400,407,413,417,421,424,428,434,440,444,447,
        453,456,461,464,467,472,478,482,485,489,496,500,503,508,515,521,
        525,529,532,536,542,548,552,556,561,568,574,578,582,585,589,595,
        601,605,608,613,620,626,630,634,637,641,647,653,657,664,667,671,
        674,678,684,687,695,698,704,708,711,715,721,724,727,734,737,741,
        747,750,757,766,769,776,783,791,804,808,814,818,821,827,830,836,
        842,847,850,854,860,863,867,871,876,880,883,887,894,898,904,913,
        917,926,930,933,936,938,948
    ]

class OCLsParser ( Parser ):

    grammarFileName = "OCLs.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'context'", "'inv'", "'pre'", "'post'", 
                     "'self'", "'forAll'", "'exists'", "'select'", "'collect'", 
                     "'OclAny'", "'OclVoid'", "<INVALID>", "'..'", "'::'", 
                     "'('", "')'", "'{'", "'}'", "';'", "':'", "','", "'.'", 
                     "'='", "'''", "'Boolean'", "'Integer'", "'Real'", "'String'", 
                     "'if'", "'then'", "'else'", "'endif'", "'and'", "'or'", 
                     "'not'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'|'", 
                     "<INVALID>", "'Bag'", "'Sequence'", "'OrderedSet'", 
                     "'-'", "'+'", "'/'", "' '", "'xor'", "'implies'", "'oclAsType'", 
                     "'oclIsTypeOf'", "'oclIsKindOf'", "'allInstances'", 
                     "'isEmpty'", "'sum'", "'size'", "'includes'", "'excludes'", 
                     "'subSequence'", "'subOrderedSet'", "'prepend'", "'last'", 
                     "'append'", "'symmetricDifference'", "'first'", "'derive'", 
                     "'body'", "'init'", "'union'", "'null'", "'let'", "'in'", 
                     "<INVALID>", "'def'" ]

    symbolicNames = [ "<INVALID>", "CONTEXT", "INV", "PRE", "POST", "SELF", 
                      "FORALL", "EXISTS", "SELECT", "COLLECT", "OCLANY", 
                      "OCLVOID", "WS", "DoubleDots", "DoubleCOLON", "LPAREN", 
                      "RPAREN", "LBRACE", "RBRACE", "SEMI", "COLON", "COMMA", 
                      "DOT", "EQUAL", "SingleQuote", "BOOLEAN_TYPE", "INTEGER_TYPE", 
                      "REAL_TYPE", "STRING_TYPE", "IF", "THEN", "ELSE", 
                      "ENDIF", "AND", "OR", "NOT", "NOTEQUAL", "LT", "LE", 
                      "GT", "GE", "PIPE", "SET", "BAG", "SEQUENCE", "ORDEREDSET", 
                      "MINUS", "PLUS", "Divide", "EMPTYSTRING", "XOR", "IMPLIES", 
                      "OCLASTYPE", "OCLISTYPEOF", "OCLISKINDOF", "ALLINSTANCES", 
                      "ISEMPTY", "SUM", "SIZE", "INCLUDES", "EXCLUDES", 
                      "SUBSEQUENCE", "SUBORDEREDSET", "PREPEND", "LAST", 
                      "APPEND", "SYMMETRICDIFFERENCE", "FIRST", "DERIVE", 
                      "BODY", "Init", "UNION", "NULL", "LET", "IN", "Arrow", 
                      "Def", "ID", "NUMBER", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                      "COMMENT", "LINE_COMMENT" ]

    RULE_oclFile = 0
    RULE_contextDeclaration = 1
    RULE_constraint = 2
    RULE_functionCall = 3
    RULE_type = 4
    RULE_collectionType = 5
    RULE_userDefinedType = 6
    RULE_expression = 7
    RULE_binaryExpression = 8
    RULE_unaryExpression = 9
    RULE_operator = 10
    RULE_numberORUserDefined = 11
    RULE_primaryExpression = 12
    RULE_literal = 13

    ruleNames =  [ "oclFile", "contextDeclaration", "constraint", "functionCall", 
                   "type", "collectionType", "userDefinedType", "expression", 
                   "binaryExpression", "unaryExpression", "operator", "numberORUserDefined", 
                   "primaryExpression", "literal" ]

    EOF = Token.EOF
    CONTEXT=1
    INV=2
    PRE=3
    POST=4
    SELF=5
    FORALL=6
    EXISTS=7
    SELECT=8
    COLLECT=9
    OCLANY=10
    OCLVOID=11
    WS=12
    DoubleDots=13
    DoubleCOLON=14
    LPAREN=15
    RPAREN=16
    LBRACE=17
    RBRACE=18
    SEMI=19
    COLON=20
    COMMA=21
    DOT=22
    EQUAL=23
    SingleQuote=24
    BOOLEAN_TYPE=25
    INTEGER_TYPE=26
    REAL_TYPE=27
    STRING_TYPE=28
    IF=29
    THEN=30
    ELSE=31
    ENDIF=32
    AND=33
    OR=34
    NOT=35
    NOTEQUAL=36
    LT=37
    LE=38
    GT=39
    GE=40
    PIPE=41
    SET=42
    BAG=43
    SEQUENCE=44
    ORDEREDSET=45
    MINUS=46
    PLUS=47
    Divide=48
    EMPTYSTRING=49
    XOR=50
    IMPLIES=51
    OCLASTYPE=52
    OCLISTYPEOF=53
    OCLISKINDOF=54
    ALLINSTANCES=55
    ISEMPTY=56
    SUM=57
    SIZE=58
    INCLUDES=59
    EXCLUDES=60
    SUBSEQUENCE=61
    SUBORDEREDSET=62
    PREPEND=63
    LAST=64
    APPEND=65
    SYMMETRICDIFFERENCE=66
    FIRST=67
    DERIVE=68
    BODY=69
    Init=70
    UNION=71
    NULL=72
    LET=73
    IN=74
    Arrow=75
    Def=76
    ID=77
    NUMBER=78
    STRING_LITERAL=79
    BOOLEAN_LITERAL=80
    COMMENT=81
    LINE_COMMENT=82

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OclFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contextDeclaration(self):
            return self.getTypedRuleContext(OCLsParser.ContextDeclarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)


        def getRuleIndex(self):
            return OCLsParser.RULE_oclFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOclFile" ):
                listener.enterOclFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOclFile" ):
                listener.exitOclFile(self)




    def oclFile(self):

        localctx = OCLsParser.OclFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oclFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 28
            self.contextDeclaration()
            self.state = 32
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441481666962400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                self.state = 29
                self.expression()
                self.state = 34
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OCLsParser.RULE_contextDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ContextExpContext(ContextDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ContextDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTEXT(self):
            return self.getToken(OCLsParser.CONTEXT, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COLON)
            else:
                return self.getToken(OCLsParser.COLON, i)
        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.TypeContext)
            else:
                return self.getTypedRuleContext(OCLsParser.TypeContext,i)

        def LBRACE(self):
            return self.getToken(OCLsParser.LBRACE, 0)
        def constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ConstraintContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ConstraintContext,i)

        def RBRACE(self):
            return self.getToken(OCLsParser.RBRACE, 0)
        def DoubleCOLON(self):
            return self.getToken(OCLsParser.DoubleCOLON, 0)
        def functionCall(self):
            return self.getTypedRuleContext(OCLsParser.FunctionCallContext,0)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)

        def DERIVE(self):
            return self.getToken(OCLsParser.DERIVE, 0)
        def BODY(self):
            return self.getToken(OCLsParser.BODY, 0)
        def Init(self):
            return self.getToken(OCLsParser.Init, 0)
        def PRE(self):
            return self.getToken(OCLsParser.PRE, 0)
        def POST(self):
            return self.getToken(OCLsParser.POST, 0)
        def Def(self):
            return self.getToken(OCLsParser.Def, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextExp" ):
                listener.enterContextExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextExp" ):
                listener.exitContextExp(self)



    def contextDeclaration(self):

        localctx = OCLsParser.ContextDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_contextDeclaration)
        self._la = 0 # Token type
        try:
            localctx = OCLsParser.ContextExpContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 35
            self.match(OCLsParser.CONTEXT)
            self.state = 36
            self.match(OCLsParser.ID)
            self.state = 39
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 37
                self.match(OCLsParser.COLON)
                self.state = 38
                self.type_()


            self.state = 42
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 41
                self.match(OCLsParser.LBRACE)


            self.state = 47
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 44
                    self.constraint() 
                self.state = 49
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 51
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 50
                self.match(OCLsParser.RBRACE)


            self.state = 54
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 53
                self.match(OCLsParser.DoubleCOLON)


            self.state = 57
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 56
                self.functionCall()


            self.state = 60
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 59
                self.match(OCLsParser.COLON)


            self.state = 63
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 62
                self.type_()


            self.state = 66
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 65
                self.match(OCLsParser.LPAREN)


            self.state = 69
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 68
                self.match(OCLsParser.ID)


            self.state = 72
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 71
                self.match(OCLsParser.RPAREN)


            self.state = 75
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 74
                self.match(OCLsParser.COLON)


            self.state = 78
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 77
                _la = self._input.LA(1)
                if not(_la==3 or _la==4 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 263) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 81
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 80
                self.match(OCLsParser.COLON)


            self.state = 84
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 83
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(OCLsParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def INV(self):
            return self.getToken(OCLsParser.INV, 0)

        def PRE(self):
            return self.getToken(OCLsParser.PRE, 0)

        def POST(self):
            return self.getToken(OCLsParser.POST, 0)

        def ID(self):
            return self.getToken(OCLsParser.ID, 0)

        def SEMI(self):
            return self.getToken(OCLsParser.SEMI, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint" ):
                listener.enterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint" ):
                listener.exitConstraint(self)




    def constraint(self):

        localctx = OCLsParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 86
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 28) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 88
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 87
                self.match(OCLsParser.ID)


            self.state = 90
            self.match(OCLsParser.COLON)
            self.state = 91
            self.expression()
            self.state = 93
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 92
                self.match(OCLsParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)


        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COLON)
            else:
                return self.getToken(OCLsParser.COLON, i)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.NUMBER)
            else:
                return self.getToken(OCLsParser.NUMBER, i)

        def getRuleIndex(self):
            return OCLsParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = OCLsParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 95
                self.match(OCLsParser.ID)
                self.state = 96
                self.match(OCLsParser.LPAREN)
                self.state = 109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441481666962400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 98
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                    if la_ == 1:
                        self.state = 97
                        self.match(OCLsParser.SingleQuote)


                    self.state = 100
                    self.expression()
                    self.state = 102
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                    if la_ == 1:
                        self.state = 101
                        self.match(OCLsParser.SingleQuote)


                    self.state = 105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 104
                        self.match(OCLsParser.COMMA)


                    self.state = 111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 112
                self.match(OCLsParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 113
                self.match(OCLsParser.ID)
                self.state = 114
                self.match(OCLsParser.LPAREN)
                self.state = 120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 115
                    self.match(OCLsParser.ID)
                    self.state = 116
                    self.match(OCLsParser.COLON)
                    self.state = 117
                    self.match(OCLsParser.ID)
                    self.state = 122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 123
                self.match(OCLsParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 124
                self.match(OCLsParser.LPAREN)
                self.state = 131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 125
                    self.match(OCLsParser.NUMBER)
                    self.state = 127
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 126
                        self.match(OCLsParser.COMMA)


                    self.state = 133
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 134
                self.match(OCLsParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_TYPE(self):
            return self.getToken(OCLsParser.BOOLEAN_TYPE, 0)

        def INTEGER_TYPE(self):
            return self.getToken(OCLsParser.INTEGER_TYPE, 0)

        def REAL_TYPE(self):
            return self.getToken(OCLsParser.REAL_TYPE, 0)

        def STRING_TYPE(self):
            return self.getToken(OCLsParser.STRING_TYPE, 0)

        def OCLANY(self):
            return self.getToken(OCLsParser.OCLANY, 0)

        def OCLVOID(self):
            return self.getToken(OCLsParser.OCLVOID, 0)

        def collectionType(self):
            return self.getTypedRuleContext(OCLsParser.CollectionTypeContext,0)


        def userDefinedType(self):
            return self.getTypedRuleContext(OCLsParser.UserDefinedTypeContext,0)


        def SET(self):
            return self.getToken(OCLsParser.SET, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = OCLsParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_type)
        try:
            self.state = 146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 137
                self.match(OCLsParser.BOOLEAN_TYPE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 138
                self.match(OCLsParser.INTEGER_TYPE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 139
                self.match(OCLsParser.REAL_TYPE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 140
                self.match(OCLsParser.STRING_TYPE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 141
                self.match(OCLsParser.OCLANY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 142
                self.match(OCLsParser.OCLVOID)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 143
                self.collectionType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 144
                self.userDefinedType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 145
                self.match(OCLsParser.SET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(OCLsParser.SET, 0)

        def LT(self):
            return self.getToken(OCLsParser.LT, 0)

        def type_(self):
            return self.getTypedRuleContext(OCLsParser.TypeContext,0)


        def GT(self):
            return self.getToken(OCLsParser.GT, 0)

        def BAG(self):
            return self.getToken(OCLsParser.BAG, 0)

        def SEQUENCE(self):
            return self.getToken(OCLsParser.SEQUENCE, 0)

        def ORDEREDSET(self):
            return self.getToken(OCLsParser.ORDEREDSET, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_collectionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionType" ):
                listener.enterCollectionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionType" ):
                listener.exitCollectionType(self)




    def collectionType(self):

        localctx = OCLsParser.CollectionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_collectionType)
        try:
            self.state = 168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.match(OCLsParser.SET)
                self.state = 149
                self.match(OCLsParser.LT)
                self.state = 150
                self.type_()
                self.state = 151
                self.match(OCLsParser.GT)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 153
                self.match(OCLsParser.BAG)
                self.state = 154
                self.match(OCLsParser.LT)
                self.state = 155
                self.type_()
                self.state = 156
                self.match(OCLsParser.GT)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 158
                self.match(OCLsParser.SEQUENCE)
                self.state = 159
                self.match(OCLsParser.LT)
                self.state = 160
                self.type_()
                self.state = 161
                self.match(OCLsParser.GT)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 163
                self.match(OCLsParser.ORDEREDSET)
                self.state = 164
                self.match(OCLsParser.LT)
                self.state = 165
                self.type_()
                self.state = 166
                self.match(OCLsParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(OCLsParser.ID, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_userDefinedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedType" ):
                listener.enterUserDefinedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedType" ):
                listener.exitUserDefinedType(self)




    def userDefinedType(self):

        localctx = OCLsParser.UserDefinedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_userDefinedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self.match(OCLsParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OCLsParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ElseExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(OCLsParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseExp" ):
                listener.enterElseExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseExp" ):
                listener.exitElseExp(self)


    class ArrowexpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowexp" ):
                listener.enterArrowexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowexp" ):
                listener.exitArrowexp(self)


    class COLLECTIONContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def PIPE(self):
            return self.getToken(OCLsParser.PIPE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def FORALL(self):
            return self.getToken(OCLsParser.FORALL, 0)
        def EXISTS(self):
            return self.getToken(OCLsParser.EXISTS, 0)
        def SELECT(self):
            return self.getToken(OCLsParser.SELECT, 0)
        def COLLECT(self):
            return self.getToken(OCLsParser.COLLECT, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COLON)
            else:
                return self.getToken(OCLsParser.COLON, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOLLECTION" ):
                listener.enterCOLLECTION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOLLECTION" ):
                listener.exitCOLLECTION(self)


    class SETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(OCLsParser.SET, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSET" ):
                listener.enterSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSET" ):
                listener.exitSET(self)


    class DefIDAssignmentexpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def COLON(self):
            return self.getToken(OCLsParser.COLON, 0)
        def EQUAL(self):
            return self.getToken(OCLsParser.EQUAL, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefIDAssignmentexpression" ):
                listener.enterDefIDAssignmentexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefIDAssignmentexpression" ):
                listener.exitDefIDAssignmentexpression(self)


    class PredefinedfunctionCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(OCLsParser.FunctionCallContext,0)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedfunctionCall" ):
                listener.enterPredefinedfunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedfunctionCall" ):
                listener.exitPredefinedfunctionCall(self)


    class UnaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.UnaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)


    class INCLUDESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INCLUDES(self):
            return self.getToken(OCLsParser.INCLUDES, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterINCLUDES" ):
                listener.enterINCLUDES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitINCLUDES" ):
                listener.exitINCLUDES(self)


    class ThenExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THEN(self):
            return self.getToken(OCLsParser.THEN, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenExp" ):
                listener.enterThenExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenExp" ):
                listener.exitThenExp(self)


    class SUBORDEREDSETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBORDEREDSET(self):
            return self.getToken(OCLsParser.SUBORDEREDSET, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUBORDEREDSET" ):
                listener.enterSUBORDEREDSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUBORDEREDSET" ):
                listener.exitSUBORDEREDSET(self)


    class PrimaryExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def operator(self):
            return self.getTypedRuleContext(OCLsParser.OperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExp" ):
                listener.enterPrimaryExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExp" ):
                listener.exitPrimaryExp(self)


    class OCLISKINDOFContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def OCLISKINDOF(self):
            return self.getToken(OCLsParser.OCLISKINDOF, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(OCLsParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLISKINDOF" ):
                listener.enterOCLISKINDOF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLISKINDOF" ):
                listener.exitOCLISKINDOF(self)


    class NumberContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(OCLsParser.NUMBER, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)


    class SYMMETRICDIFFERENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def SYMMETRICDIFFERENCE(self):
            return self.getToken(OCLsParser.SYMMETRICDIFFERENCE, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYMMETRICDIFFERENCE" ):
                listener.enterSYMMETRICDIFFERENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYMMETRICDIFFERENCE" ):
                listener.exitSYMMETRICDIFFERENCE(self)


    class SEQUENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEQUENCE(self):
            return self.getToken(OCLsParser.SEQUENCE, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSEQUENCE" ):
                listener.enterSEQUENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSEQUENCE" ):
                listener.exitSEQUENCE(self)


    class ORDEREDSETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDEREDSET(self):
            return self.getToken(OCLsParser.ORDEREDSET, 0)
        def LBRACE(self):
            return self.getToken(OCLsParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(OCLsParser.RBRACE, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterORDEREDSET" ):
                listener.enterORDEREDSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitORDEREDSET" ):
                listener.exitORDEREDSET(self)


    class DoubleDotsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DoubleDots(self):
            return self.getToken(OCLsParser.DoubleDots, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleDots" ):
                listener.enterDoubleDots(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleDots" ):
                listener.exitDoubleDots(self)


    class EXCLUDESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXCLUDES(self):
            return self.getToken(OCLsParser.EXCLUDES, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEXCLUDES" ):
                listener.enterEXCLUDES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEXCLUDES" ):
                listener.exitEXCLUDES(self)


    class DERIVEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def DERIVE(self):
            return self.getToken(OCLsParser.DERIVE, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDERIVE" ):
                listener.enterDERIVE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDERIVE" ):
                listener.exitDERIVE(self)


    class IDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterID" ):
                listener.enterID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitID" ):
                listener.exitID(self)


    class ALLINSTANCESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALLINSTANCES(self):
            return self.getToken(OCLsParser.ALLINSTANCES, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterALLINSTANCES" ):
                listener.enterALLINSTANCES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitALLINSTANCES" ):
                listener.exitALLINSTANCES(self)


    class OpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operator(self):
            return self.getTypedRuleContext(OCLsParser.OperatorContext,0)

        def numberORUserDefined(self):
            return self.getTypedRuleContext(OCLsParser.NumberORUserDefinedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp" ):
                listener.enterOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp" ):
                listener.exitOp(self)


    class SUBSEQUENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSEQUENCE(self):
            return self.getToken(OCLsParser.SUBSEQUENCE, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUBSEQUENCE" ):
                listener.enterSUBSEQUENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUBSEQUENCE" ):
                listener.exitSUBSEQUENCE(self)


    class SIZEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def SIZE(self):
            return self.getToken(OCLsParser.SIZE, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSIZE" ):
                listener.enterSIZE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSIZE" ):
                listener.exitSIZE(self)


    class SingleQuoteExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleQuoteExp" ):
                listener.enterSingleQuoteExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleQuoteExp" ):
                listener.exitSingleQuoteExp(self)


    class BAGContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BAG(self):
            return self.getToken(OCLsParser.BAG, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBAG" ):
                listener.enterBAG(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBAG" ):
                listener.exitBAG(self)


    class OCLISTYPEOFContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def OCLISTYPEOF(self):
            return self.getToken(OCLsParser.OCLISTYPEOF, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(OCLsParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLISTYPEOF" ):
                listener.enterOCLISTYPEOF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLISTYPEOF" ):
                listener.exitOCLISTYPEOF(self)


    class SUMContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def SUM(self):
            return self.getToken(OCLsParser.SUM, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUM" ):
                listener.enterSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUM" ):
                listener.exitSUM(self)


    class FIRSTContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def FIRST(self):
            return self.getToken(OCLsParser.FIRST, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFIRST" ):
                listener.enterFIRST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFIRST" ):
                listener.exitFIRST(self)


    class APPENDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def APPEND(self):
            return self.getToken(OCLsParser.APPEND, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAPPEND" ):
                listener.enterAPPEND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAPPEND" ):
                listener.exitAPPEND(self)


    class OCLASTYPEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def OCLASTYPE(self):
            return self.getToken(OCLsParser.OCLASTYPE, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(OCLsParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLASTYPE" ):
                listener.enterOCLASTYPE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLASTYPE" ):
                listener.exitOCLASTYPE(self)


    class CollectionExpressionVariableContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def FORALL(self):
            return self.getToken(OCLsParser.FORALL, 0)
        def EXISTS(self):
            return self.getToken(OCLsParser.EXISTS, 0)
        def SELECT(self):
            return self.getToken(OCLsParser.SELECT, 0)
        def COLLECT(self):
            return self.getToken(OCLsParser.COLLECT, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionExpressionVariable" ):
                listener.enterCollectionExpressionVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionExpressionVariable" ):
                listener.exitCollectionExpressionVariable(self)


    class LASTContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LAST(self):
            return self.getToken(OCLsParser.LAST, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLAST" ):
                listener.enterLAST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLAST" ):
                listener.exitLAST(self)


    class BinaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.BinaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)

        def AND(self):
            return self.getToken(OCLsParser.AND, 0)
        def OR(self):
            return self.getToken(OCLsParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)


    class IfExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(OCLsParser.IF, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExp" ):
                listener.enterIfExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExp" ):
                listener.exitIfExp(self)


    class EndIfExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENDIF(self):
            return self.getToken(OCLsParser.ENDIF, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndIfExp" ):
                listener.enterEndIfExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndIfExp" ):
                listener.exitEndIfExp(self)


    class ISEMPTYContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def ISEMPTY(self):
            return self.getToken(OCLsParser.ISEMPTY, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISEMPTY" ):
                listener.enterISEMPTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISEMPTY" ):
                listener.exitISEMPTY(self)


    class DefExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(OCLsParser.Def, 0)
        def COLON(self):
            return self.getToken(OCLsParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefExp" ):
                listener.enterDefExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefExp" ):
                listener.exitDefExp(self)


    class FuncCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(OCLsParser.FunctionCallContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def operator(self):
            return self.getTypedRuleContext(OCLsParser.OperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncCall" ):
                listener.enterFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncCall" ):
                listener.exitFuncCall(self)


    class UNIONContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def UNION(self):
            return self.getToken(OCLsParser.UNION, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUNION" ):
                listener.enterUNION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUNION" ):
                listener.exitUNION(self)


    class PREPENDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def PREPEND(self):
            return self.getToken(OCLsParser.PREPEND, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPREPEND" ):
                listener.enterPREPEND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPREPEND" ):
                listener.exitPREPEND(self)



    def expression(self):

        localctx = OCLsParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                localctx = OCLsParser.BinaryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33 or _la==34:
                    self.state = 172
                    _la = self._input.LA(1)
                    if not(_la==33 or _la==34):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 175
                self.binaryExpression()
                self.state = 177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 176
                    self.expression()


                pass

            elif la_ == 2:
                localctx = OCLsParser.UnaryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 179
                self.unaryExpression()
                self.state = 181
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 180
                    self.expression()


                pass

            elif la_ == 3:
                localctx = OCLsParser.IfExpContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 183
                self.match(OCLsParser.IF)
                self.state = 184
                self.expression()
                pass

            elif la_ == 4:
                localctx = OCLsParser.ThenExpContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 185
                self.match(OCLsParser.THEN)
                self.state = 186
                self.expression()
                pass

            elif la_ == 5:
                localctx = OCLsParser.ElseExpContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 187
                self.match(OCLsParser.ELSE)
                self.state = 188
                self.expression()
                pass

            elif la_ == 6:
                localctx = OCLsParser.EndIfExpContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 189
                self.match(OCLsParser.ENDIF)
                self.state = 191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 190
                    self.expression()


                pass

            elif la_ == 7:
                localctx = OCLsParser.OCLISTYPEOFContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 193
                self.primaryExpression()
                self.state = 198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 194
                        self.match(OCLsParser.DOT)
                        self.state = 195
                        self.match(OCLsParser.ID) 
                    self.state = 200
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                self.state = 201
                self.match(OCLsParser.DOT)
                self.state = 202
                self.match(OCLsParser.OCLISTYPEOF)
                self.state = 203
                self.match(OCLsParser.LPAREN)
                self.state = 204
                self.type_()
                self.state = 205
                self.match(OCLsParser.RPAREN)
                self.state = 207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 206
                    self.expression()


                pass

            elif la_ == 8:
                localctx = OCLsParser.OCLASTYPEContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 209
                self.primaryExpression()
                self.state = 214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 210
                        self.match(OCLsParser.DOT)
                        self.state = 211
                        self.match(OCLsParser.ID) 
                    self.state = 216
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 217
                self.match(OCLsParser.DOT)
                self.state = 218
                self.match(OCLsParser.OCLASTYPE)
                self.state = 219
                self.match(OCLsParser.LPAREN)
                self.state = 220
                self.type_()
                self.state = 221
                self.match(OCLsParser.RPAREN)
                self.state = 223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 222
                    self.expression()


                pass

            elif la_ == 9:
                localctx = OCLsParser.OCLISKINDOFContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 225
                self.primaryExpression()
                self.state = 230
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 226
                        self.match(OCLsParser.DOT)
                        self.state = 227
                        self.match(OCLsParser.ID) 
                    self.state = 232
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 233
                self.match(OCLsParser.DOT)
                self.state = 234
                self.match(OCLsParser.OCLISKINDOF)
                self.state = 235
                self.match(OCLsParser.LPAREN)
                self.state = 236
                self.type_()
                self.state = 237
                self.match(OCLsParser.RPAREN)
                self.state = 239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 238
                    self.expression()


                pass

            elif la_ == 10:
                localctx = OCLsParser.ISEMPTYContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==15 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 481) != 0):
                    self.state = 241
                    self.primaryExpression()


                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 244
                    self.match(OCLsParser.DOT)
                    self.state = 245
                    self.match(OCLsParser.ID)
                    self.state = 250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 251
                self.match(OCLsParser.Arrow)
                self.state = 252
                self.match(OCLsParser.ISEMPTY)
                self.state = 253
                self.match(OCLsParser.LPAREN)
                self.state = 254
                self.match(OCLsParser.RPAREN)
                self.state = 256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 255
                    self.expression()


                self.state = 261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 258
                        self.match(OCLsParser.RPAREN) 
                    self.state = 263
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                pass

            elif la_ == 11:
                localctx = OCLsParser.SUMContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==15 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 481) != 0):
                    self.state = 264
                    self.primaryExpression()


                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 267
                    self.match(OCLsParser.DOT)
                    self.state = 268
                    self.match(OCLsParser.ID)
                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 274
                self.match(OCLsParser.Arrow)
                self.state = 275
                self.match(OCLsParser.SUM)
                self.state = 276
                self.match(OCLsParser.LPAREN)
                self.state = 277
                self.match(OCLsParser.RPAREN)
                self.state = 279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 278
                    self.expression()


                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 281
                        self.match(OCLsParser.RPAREN) 
                    self.state = 286
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass

            elif la_ == 12:
                localctx = OCLsParser.SIZEContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==15 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 481) != 0):
                    self.state = 287
                    self.primaryExpression()


                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 290
                    self.match(OCLsParser.DOT)
                    self.state = 291
                    self.match(OCLsParser.ID)
                    self.state = 296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 297
                self.match(OCLsParser.Arrow)
                self.state = 298
                self.match(OCLsParser.SIZE)
                self.state = 299
                self.match(OCLsParser.LPAREN)
                self.state = 300
                self.match(OCLsParser.RPAREN)
                self.state = 302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 301
                    self.expression()


                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 304
                        self.match(OCLsParser.RPAREN) 
                    self.state = 309
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                pass

            elif la_ == 13:
                localctx = OCLsParser.INCLUDESContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 310
                    self.match(OCLsParser.Arrow)


                self.state = 313
                self.match(OCLsParser.INCLUDES)
                self.state = 314
                self.match(OCLsParser.LPAREN)
                self.state = 315
                self.expression()
                self.state = 316
                self.match(OCLsParser.RPAREN)
                self.state = 318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 317
                    self.expression()


                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 320
                        self.match(OCLsParser.RPAREN) 
                    self.state = 325
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                pass

            elif la_ == 14:
                localctx = OCLsParser.EXCLUDESContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 326
                    self.match(OCLsParser.Arrow)


                self.state = 329
                self.match(OCLsParser.EXCLUDES)
                self.state = 330
                self.match(OCLsParser.LPAREN)
                self.state = 331
                self.expression()
                self.state = 332
                self.match(OCLsParser.RPAREN)
                self.state = 334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 333
                    self.expression()


                self.state = 339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 336
                        self.match(OCLsParser.RPAREN) 
                    self.state = 341
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                pass

            elif la_ == 15:
                localctx = OCLsParser.SEQUENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 342
                    self.match(OCLsParser.Arrow)


                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 345
                    self.match(OCLsParser.LPAREN)
                    self.state = 350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 351
                self.match(OCLsParser.SEQUENCE)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 352
                    self.match(OCLsParser.LBRACE)
                    self.state = 357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 358
                        self.match(OCLsParser.LPAREN) 
                    self.state = 363
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                self.state = 376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 365
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                        if la_ == 1:
                            self.state = 364
                            self.match(OCLsParser.SingleQuote)


                        self.state = 367
                        self.expression()
                        self.state = 369
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                        if la_ == 1:
                            self.state = 368
                            self.match(OCLsParser.SingleQuote)


                        self.state = 372
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                        if la_ == 1:
                            self.state = 371
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 378
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                self.state = 382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 379
                        self.match(OCLsParser.RBRACE) 
                    self.state = 384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                self.state = 388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 385
                        self.match(OCLsParser.RPAREN) 
                    self.state = 390
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                self.state = 392
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 391
                    self.expression()


                pass

            elif la_ == 16:
                localctx = OCLsParser.SUBSEQUENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 394
                    self.match(OCLsParser.Arrow)


                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 397
                    self.match(OCLsParser.LPAREN)
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 403
                self.match(OCLsParser.SUBSEQUENCE)
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 404
                    self.match(OCLsParser.LBRACE)
                    self.state = 409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 410
                        self.match(OCLsParser.LPAREN) 
                    self.state = 415
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 417
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                        if la_ == 1:
                            self.state = 416
                            self.match(OCLsParser.SingleQuote)


                        self.state = 419
                        self.expression()
                        self.state = 421
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                        if la_ == 1:
                            self.state = 420
                            self.match(OCLsParser.SingleQuote)


                        self.state = 424
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                        if la_ == 1:
                            self.state = 423
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 430
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 431
                        self.match(OCLsParser.RPAREN) 
                    self.state = 436
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 437
                        self.match(OCLsParser.RBRACE) 
                    self.state = 442
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 443
                    self.expression()


                pass

            elif la_ == 17:
                localctx = OCLsParser.ALLINSTANCESContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 446
                    self.match(OCLsParser.Arrow)


                self.state = 449
                self.match(OCLsParser.ALLINSTANCES)
                self.state = 451 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 450
                        self.match(OCLsParser.LPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 453 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441481666962400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 455
                    self.expression()


                self.state = 459 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 458
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 461 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                self.state = 464
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 463
                    self.expression()


                pass

            elif la_ == 18:
                localctx = OCLsParser.ORDEREDSETContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 466
                    self.match(OCLsParser.Arrow)


                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 469
                    self.match(OCLsParser.LPAREN)
                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 475
                self.match(OCLsParser.ORDEREDSET)
                self.state = 476
                self.match(OCLsParser.LBRACE)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441481666962400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 478
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        self.state = 477
                        self.match(OCLsParser.SingleQuote)


                    self.state = 480
                    self.expression()
                    self.state = 482
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 481
                        self.match(OCLsParser.SingleQuote)


                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 484
                        self.match(OCLsParser.COMMA)


                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 492
                self.match(OCLsParser.RBRACE)
                self.state = 496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 493
                        self.match(OCLsParser.RPAREN) 
                    self.state = 498
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 499
                    self.expression()


                pass

            elif la_ == 19:
                localctx = OCLsParser.SUBORDEREDSETContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 502
                    self.match(OCLsParser.Arrow)


                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 505
                    self.match(OCLsParser.LPAREN)
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 511
                self.match(OCLsParser.SUBORDEREDSET)
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 512
                    self.match(OCLsParser.LBRACE)
                    self.state = 517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 521
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 518
                        self.match(OCLsParser.LPAREN) 
                    self.state = 523
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 525
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 524
                            self.match(OCLsParser.SingleQuote)


                        self.state = 527
                        self.expression()
                        self.state = 529
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                        if la_ == 1:
                            self.state = 528
                            self.match(OCLsParser.SingleQuote)


                        self.state = 532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==21:
                            self.state = 531
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 538
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18:
                    self.state = 539
                    self.match(OCLsParser.RBRACE)
                    self.state = 544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 545
                        self.match(OCLsParser.RPAREN) 
                    self.state = 550
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441481666962400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 551
                    self.expression()


                self.state = 554
                self.match(OCLsParser.RPAREN)
                pass

            elif la_ == 20:
                localctx = OCLsParser.SETContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 555
                    self.match(OCLsParser.Arrow)


                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 558
                    self.match(OCLsParser.LPAREN)
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 564
                self.match(OCLsParser.SET)
                self.state = 568
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 565
                        self.match(OCLsParser.LPAREN) 
                    self.state = 570
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 571
                    self.match(OCLsParser.LBRACE)
                    self.state = 576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 589
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 578
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                        if la_ == 1:
                            self.state = 577
                            self.match(OCLsParser.SingleQuote)


                        self.state = 580
                        self.expression()
                        self.state = 582
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                        if la_ == 1:
                            self.state = 581
                            self.match(OCLsParser.SingleQuote)


                        self.state = 585
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                        if la_ == 1:
                            self.state = 584
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 591
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 592
                        self.match(OCLsParser.RBRACE) 
                    self.state = 597
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 598
                        self.match(OCLsParser.RPAREN) 
                    self.state = 603
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                self.state = 605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 604
                    self.expression()


                pass

            elif la_ == 21:
                localctx = OCLsParser.BAGContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 607
                    self.match(OCLsParser.Arrow)


                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 610
                    self.match(OCLsParser.LPAREN)
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 616
                self.match(OCLsParser.BAG)
                self.state = 620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 617
                        self.match(OCLsParser.LPAREN) 
                    self.state = 622
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 623
                    self.match(OCLsParser.LBRACE)
                    self.state = 628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 641
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 630
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                        if la_ == 1:
                            self.state = 629
                            self.match(OCLsParser.SingleQuote)


                        self.state = 632
                        self.expression()
                        self.state = 634
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                        if la_ == 1:
                            self.state = 633
                            self.match(OCLsParser.SingleQuote)


                        self.state = 637
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                        if la_ == 1:
                            self.state = 636
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 643
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                self.state = 647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 644
                        self.match(OCLsParser.RBRACE) 
                    self.state = 649
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 650
                        self.match(OCLsParser.RPAREN) 
                    self.state = 655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                self.state = 657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 656
                    self.expression()


                pass

            elif la_ == 22:
                localctx = OCLsParser.PREPENDContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 659
                self.match(OCLsParser.Arrow)
                self.state = 660
                self.match(OCLsParser.PREPEND)
                self.state = 662 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 661
                        self.match(OCLsParser.LPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 664 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441481666962400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 667
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        self.state = 666
                        self.match(OCLsParser.SingleQuote)


                    self.state = 669
                    self.expression()
                    self.state = 671
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                    if la_ == 1:
                        self.state = 670
                        self.match(OCLsParser.SingleQuote)


                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 673
                        self.match(OCLsParser.COMMA)


                    self.state = 680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 682 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 681
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 684 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                self.state = 687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 686
                    self.expression()


                pass

            elif la_ == 23:
                localctx = OCLsParser.LASTContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 689
                self.match(OCLsParser.Arrow)
                self.state = 690
                self.match(OCLsParser.LAST)
                self.state = 691
                self.match(OCLsParser.LPAREN)
                self.state = 693 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 692
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 695 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                self.state = 698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 697
                    self.expression()


                pass

            elif la_ == 24:
                localctx = OCLsParser.APPENDContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 700
                self.match(OCLsParser.Arrow)
                self.state = 701
                self.match(OCLsParser.APPEND)
                self.state = 702
                self.match(OCLsParser.LPAREN)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441481666962400) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 704
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        self.state = 703
                        self.match(OCLsParser.SingleQuote)


                    self.state = 706
                    self.expression()
                    self.state = 708
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        self.state = 707
                        self.match(OCLsParser.SingleQuote)


                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 710
                        self.match(OCLsParser.COMMA)


                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 719 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 718
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 721 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 723
                    self.expression()


                pass

            elif la_ == 25:
                localctx = OCLsParser.COLLECTIONContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 726
                    self.match(OCLsParser.Arrow)


                self.state = 729
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 730
                self.match(OCLsParser.LPAREN)
                self.state = 739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 731
                    self.match(OCLsParser.ID)
                    self.state = 734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 732
                        self.match(OCLsParser.COLON)
                        self.state = 733
                        self.match(OCLsParser.ID)


                    self.state = 737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 736
                        self.match(OCLsParser.COMMA)


                    self.state = 741 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==77):
                        break

                self.state = 743
                self.match(OCLsParser.PIPE)
                self.state = 744
                self.expression()
                self.state = 745
                self.match(OCLsParser.RPAREN)
                self.state = 747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 746
                    self.expression()


                pass

            elif la_ == 26:
                localctx = OCLsParser.CollectionExpressionVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 749
                    self.match(OCLsParser.Arrow)


                self.state = 752
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 753
                self.match(OCLsParser.LPAREN)
                self.state = 754
                self.expression()
                self.state = 755
                self.match(OCLsParser.RPAREN)
                self.state = 757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 756
                    self.expression()


                pass

            elif la_ == 27:
                localctx = OCLsParser.SYMMETRICDIFFERENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 759
                self.match(OCLsParser.Arrow)
                self.state = 760
                self.match(OCLsParser.SYMMETRICDIFFERENCE)
                self.state = 761
                self.match(OCLsParser.LPAREN)
                self.state = 762
                self.expression()
                self.state = 764 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 763
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 766 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                self.state = 769
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 768
                    self.expression()


                pass

            elif la_ == 28:
                localctx = OCLsParser.FIRSTContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 771
                self.match(OCLsParser.Arrow)
                self.state = 772
                self.match(OCLsParser.FIRST)
                self.state = 773
                self.match(OCLsParser.LPAREN)
                self.state = 774
                self.match(OCLsParser.RPAREN)
                self.state = 776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 775
                    self.expression()


                pass

            elif la_ == 29:
                localctx = OCLsParser.DERIVEContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 778
                self.match(OCLsParser.Arrow)
                self.state = 779
                self.match(OCLsParser.DERIVE)
                self.state = 780
                self.match(OCLsParser.LPAREN)
                self.state = 781
                self.match(OCLsParser.RPAREN)
                self.state = 783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 782
                    self.expression()


                pass

            elif la_ == 30:
                localctx = OCLsParser.UNIONContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 785
                self.match(OCLsParser.Arrow)
                self.state = 786
                self.match(OCLsParser.UNION)
                self.state = 787
                self.match(OCLsParser.LPAREN)
                self.state = 788
                self.expression()
                self.state = 789
                self.match(OCLsParser.RPAREN)
                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 790
                    self.expression()


                pass

            elif la_ == 31:
                localctx = OCLsParser.DefExpContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 793
                self.match(OCLsParser.Def)
                self.state = 794
                self.match(OCLsParser.COLON)
                self.state = 795
                self.expression()
                pass

            elif la_ == 32:
                localctx = OCLsParser.DefIDAssignmentexpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 796
                self.match(OCLsParser.ID)
                self.state = 797
                self.match(OCLsParser.COLON)
                self.state = 798
                self.match(OCLsParser.ID)
                self.state = 799
                self.match(OCLsParser.EQUAL)
                self.state = 800
                self.expression()
                pass

            elif la_ == 33:
                localctx = OCLsParser.PrimaryExpContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 801
                        self.match(OCLsParser.LPAREN) 
                    self.state = 806
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 807
                    self.primaryExpression()


                self.state = 814
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 810
                        self.match(OCLsParser.DOT)
                        self.state = 811
                        self.match(OCLsParser.ID) 
                    self.state = 816
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4435386965164032) != 0):
                    self.state = 817
                    self.operator()


                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==15 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 481) != 0):
                    self.state = 820
                    self.primaryExpression()


                self.state = 825 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 823
                        self.match(OCLsParser.DOT)
                        self.state = 824
                        self.match(OCLsParser.ID)

                    else:
                        raise NoViableAltException(self)
                    self.state = 827 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 829
                    self.expression()


                pass

            elif la_ == 34:
                localctx = OCLsParser.FuncCallContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 832
                self.primaryExpression()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 833
                    self.match(OCLsParser.DOT)
                    self.state = 838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 842
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 839
                        self.match(OCLsParser.ID) 
                    self.state = 844
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                self.state = 845
                self.functionCall()
                self.state = 847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 846
                    self.operator()


                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 849
                    self.expression()


                pass

            elif la_ == 35:
                localctx = OCLsParser.OpContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 852
                self.operator()
                self.state = 854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 853
                    self.numberORUserDefined()


                pass

            elif la_ == 36:
                localctx = OCLsParser.ArrowexpContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 856
                self.match(OCLsParser.Arrow)
                self.state = 857
                self.expression()
                pass

            elif la_ == 37:
                localctx = OCLsParser.NumberContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 858
                self.match(OCLsParser.NUMBER)
                self.state = 860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 859
                    self.expression()


                pass

            elif la_ == 38:
                localctx = OCLsParser.PredefinedfunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 862
                    self.match(OCLsParser.Arrow)


                self.state = 865
                self.functionCall()
                self.state = 867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 866
                    self.expression()


                pass

            elif la_ == 39:
                localctx = OCLsParser.IDContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 869
                self.primaryExpression()
                self.state = 871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 870
                    self.expression()


                pass

            elif la_ == 40:
                localctx = OCLsParser.SingleQuoteExpContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 873
                self.match(OCLsParser.SingleQuote)
                self.state = 874
                self.expression()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 875
                    self.match(OCLsParser.DOT)


                self.state = 878
                self.match(OCLsParser.SingleQuote)
                self.state = 880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 879
                    self.match(OCLsParser.DOT)


                self.state = 883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 882
                    self.expression()


                pass

            elif la_ == 41:
                localctx = OCLsParser.DoubleDotsContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 885
                self.match(OCLsParser.DoubleDots)
                self.state = 886
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(OCLsParser.OperatorContext,0)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.NUMBER)
            else:
                return self.getToken(OCLsParser.NUMBER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return OCLsParser.RULE_binaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpression" ):
                listener.enterBinaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpression" ):
                listener.exitBinaryExpression(self)




    def binaryExpression(self):

        localctx = OCLsParser.BinaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_binaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 889
                self.primaryExpression()
                self.state = 894
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 890
                        self.match(OCLsParser.DOT)
                        self.state = 891
                        self.match(OCLsParser.ID) 
                    self.state = 896
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

                pass

            elif la_ == 2:
                self.state = 897
                self.match(OCLsParser.NUMBER)
                pass


            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 900
                self.match(OCLsParser.DOT)
                self.state = 901
                self.match(OCLsParser.ID)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 907
            self.operator()
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 908
                self.primaryExpression()
                self.state = 913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 909
                        self.match(OCLsParser.DOT)
                        self.state = 910
                        self.match(OCLsParser.ID) 
                    self.state = 915
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

                pass

            elif la_ == 2:
                self.state = 916
                self.match(OCLsParser.NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def NOT(self):
            return self.getToken(OCLsParser.NOT, 0)

        def MINUS(self):
            return self.getToken(OCLsParser.MINUS, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = OCLsParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            _la = self._input.LA(1)
            if not(_la==35 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 920
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(OCLsParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(OCLsParser.NOTEQUAL, 0)

        def LT(self):
            return self.getToken(OCLsParser.LT, 0)

        def LE(self):
            return self.getToken(OCLsParser.LE, 0)

        def GT(self):
            return self.getToken(OCLsParser.GT, 0)

        def GE(self):
            return self.getToken(OCLsParser.GE, 0)

        def PLUS(self):
            return self.getToken(OCLsParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(OCLsParser.MINUS, 0)

        def EMPTYSTRING(self):
            return self.getToken(OCLsParser.EMPTYSTRING, 0)

        def Divide(self):
            return self.getToken(OCLsParser.Divide, 0)

        def AND(self):
            return self.getToken(OCLsParser.AND, 0)

        def OR(self):
            return self.getToken(OCLsParser.OR, 0)

        def XOR(self):
            return self.getToken(OCLsParser.XOR, 0)

        def IMPLIES(self):
            return self.getToken(OCLsParser.IMPLIES, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = OCLsParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4435386965164032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberORUserDefinedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(OCLsParser.NUMBER, 0)

        def ID(self):
            return self.getToken(OCLsParser.ID, 0)

        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_numberORUserDefined

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberORUserDefined" ):
                listener.enterNumberORUserDefined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberORUserDefined" ):
                listener.exitNumberORUserDefined(self)




    def numberORUserDefined(self):

        localctx = OCLsParser.NumberORUserDefinedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_numberORUserDefined)
        self._la = 0 # Token type
        try:
            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.match(OCLsParser.NUMBER)
                pass
            elif token in [24, 77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 925
                    self.match(OCLsParser.SingleQuote)


                self.state = 928
                self.match(OCLsParser.ID)
                self.state = 930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 929
                    self.match(OCLsParser.LPAREN)


                self.state = 933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 932
                    self.match(OCLsParser.RPAREN)


                self.state = 936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 935
                    self.match(OCLsParser.SingleQuote)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(OCLsParser.LiteralContext,0)


        def SELF(self):
            return self.getToken(OCLsParser.SELF, 0)

        def functionCall(self):
            return self.getTypedRuleContext(OCLsParser.FunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)

        def ID(self):
            return self.getToken(OCLsParser.ID, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = OCLsParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primaryExpression)
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.match(OCLsParser.SELF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 942
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 943
                self.match(OCLsParser.LPAREN)
                self.state = 944
                self.expression()
                self.state = 945
                self.match(OCLsParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 947
                self.match(OCLsParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(OCLsParser.NUMBER, 0)

        def STRING_LITERAL(self):
            return self.getToken(OCLsParser.STRING_LITERAL, 0)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OCLsParser.BOOLEAN_LITERAL, 0)

        def NULL(self):
            return self.getToken(OCLsParser.NULL, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = OCLsParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 449) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





