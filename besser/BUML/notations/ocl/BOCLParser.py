# Generated from BOCL.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,83,971,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,1,0,1,0,5,0,33,8,0,10,0,12,0,36,9,0,1,1,1,1,1,1,1,1,3,
        1,42,8,1,1,1,3,1,45,8,1,1,1,5,1,48,8,1,10,1,12,1,51,9,1,1,1,3,1,
        54,8,1,1,1,3,1,57,8,1,1,1,3,1,60,8,1,1,1,3,1,63,8,1,1,1,3,1,66,8,
        1,1,1,3,1,69,8,1,1,1,3,1,72,8,1,1,1,3,1,75,8,1,1,1,3,1,78,8,1,1,
        1,3,1,81,8,1,1,1,3,1,84,8,1,1,1,3,1,87,8,1,1,2,1,2,3,2,91,8,2,1,
        2,1,2,1,2,3,2,96,8,2,1,3,1,3,1,3,3,3,101,8,3,1,3,1,3,3,3,105,8,3,
        1,3,3,3,108,8,3,5,3,110,8,3,10,3,12,3,113,9,3,1,3,1,3,1,3,1,3,1,
        3,1,3,5,3,121,8,3,10,3,12,3,124,9,3,1,3,1,3,1,3,1,3,3,3,130,8,3,
        5,3,132,8,3,10,3,12,3,135,9,3,1,3,3,3,138,8,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,149,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,171,8,5,1,6,1,
        6,1,7,3,7,176,8,7,1,7,1,7,3,7,180,8,7,1,7,1,7,3,7,184,8,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,194,8,7,1,7,1,7,1,7,5,7,199,8,7,10,
        7,12,7,202,9,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,210,8,7,1,7,1,7,1,7,5,
        7,215,8,7,10,7,12,7,218,9,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,226,8,7,
        1,7,1,7,1,7,5,7,231,8,7,10,7,12,7,234,9,7,1,7,1,7,1,7,1,7,1,7,1,
        7,3,7,242,8,7,1,7,3,7,245,8,7,1,7,1,7,5,7,249,8,7,10,7,12,7,252,
        9,7,1,7,1,7,1,7,1,7,1,7,3,7,259,8,7,1,7,5,7,262,8,7,10,7,12,7,265,
        9,7,1,7,3,7,268,8,7,1,7,1,7,5,7,272,8,7,10,7,12,7,275,9,7,1,7,1,
        7,1,7,1,7,1,7,3,7,282,8,7,1,7,5,7,285,8,7,10,7,12,7,288,9,7,1,7,
        3,7,291,8,7,1,7,1,7,5,7,295,8,7,10,7,12,7,298,9,7,1,7,1,7,1,7,1,
        7,1,7,3,7,305,8,7,1,7,5,7,308,8,7,10,7,12,7,311,9,7,1,7,3,7,314,
        8,7,1,7,1,7,1,7,1,7,1,7,3,7,321,8,7,1,7,5,7,324,8,7,10,7,12,7,327,
        9,7,1,7,3,7,330,8,7,1,7,1,7,1,7,1,7,1,7,3,7,337,8,7,1,7,5,7,340,
        8,7,10,7,12,7,343,9,7,1,7,3,7,346,8,7,1,7,5,7,349,8,7,10,7,12,7,
        352,9,7,1,7,1,7,5,7,356,8,7,10,7,12,7,359,9,7,1,7,5,7,362,8,7,10,
        7,12,7,365,9,7,1,7,3,7,368,8,7,1,7,1,7,3,7,372,8,7,1,7,3,7,375,8,
        7,5,7,377,8,7,10,7,12,7,380,9,7,1,7,5,7,383,8,7,10,7,12,7,386,9,
        7,1,7,5,7,389,8,7,10,7,12,7,392,9,7,1,7,3,7,395,8,7,1,7,3,7,398,
        8,7,1,7,5,7,401,8,7,10,7,12,7,404,9,7,1,7,1,7,5,7,408,8,7,10,7,12,
        7,411,9,7,1,7,5,7,414,8,7,10,7,12,7,417,9,7,1,7,3,7,420,8,7,1,7,
        1,7,3,7,424,8,7,1,7,3,7,427,8,7,5,7,429,8,7,10,7,12,7,432,9,7,1,
        7,5,7,435,8,7,10,7,12,7,438,9,7,1,7,5,7,441,8,7,10,7,12,7,444,9,
        7,1,7,3,7,447,8,7,1,7,3,7,450,8,7,1,7,1,7,4,7,454,8,7,11,7,12,7,
        455,1,7,3,7,459,8,7,1,7,4,7,462,8,7,11,7,12,7,463,1,7,3,7,467,8,
        7,1,7,3,7,470,8,7,1,7,5,7,473,8,7,10,7,12,7,476,9,7,1,7,1,7,1,7,
        3,7,481,8,7,1,7,1,7,3,7,485,8,7,1,7,3,7,488,8,7,5,7,490,8,7,10,7,
        12,7,493,9,7,1,7,1,7,5,7,497,8,7,10,7,12,7,500,9,7,1,7,3,7,503,8,
        7,1,7,3,7,506,8,7,1,7,5,7,509,8,7,10,7,12,7,512,9,7,1,7,1,7,5,7,
        516,8,7,10,7,12,7,519,9,7,1,7,5,7,522,8,7,10,7,12,7,525,9,7,1,7,
        3,7,528,8,7,1,7,1,7,3,7,532,8,7,1,7,3,7,535,8,7,5,7,537,8,7,10,7,
        12,7,540,9,7,1,7,5,7,543,8,7,10,7,12,7,546,9,7,1,7,5,7,549,8,7,10,
        7,12,7,552,9,7,1,7,3,7,555,8,7,1,7,1,7,3,7,559,8,7,1,7,5,7,562,8,
        7,10,7,12,7,565,9,7,1,7,1,7,5,7,569,8,7,10,7,12,7,572,9,7,1,7,5,
        7,575,8,7,10,7,12,7,578,9,7,1,7,3,7,581,8,7,1,7,1,7,3,7,585,8,7,
        1,7,3,7,588,8,7,5,7,590,8,7,10,7,12,7,593,9,7,1,7,5,7,596,8,7,10,
        7,12,7,599,9,7,1,7,5,7,602,8,7,10,7,12,7,605,9,7,1,7,3,7,608,8,7,
        1,7,3,7,611,8,7,1,7,5,7,614,8,7,10,7,12,7,617,9,7,1,7,1,7,5,7,621,
        8,7,10,7,12,7,624,9,7,1,7,5,7,627,8,7,10,7,12,7,630,9,7,1,7,3,7,
        633,8,7,1,7,1,7,3,7,637,8,7,1,7,3,7,640,8,7,5,7,642,8,7,10,7,12,
        7,645,9,7,1,7,5,7,648,8,7,10,7,12,7,651,9,7,1,7,5,7,654,8,7,10,7,
        12,7,657,9,7,1,7,3,7,660,8,7,1,7,1,7,1,7,4,7,665,8,7,11,7,12,7,666,
        1,7,3,7,670,8,7,1,7,1,7,3,7,674,8,7,1,7,3,7,677,8,7,5,7,679,8,7,
        10,7,12,7,682,9,7,1,7,4,7,685,8,7,11,7,12,7,686,1,7,3,7,690,8,7,
        1,7,1,7,1,7,1,7,4,7,696,8,7,11,7,12,7,697,1,7,3,7,701,8,7,1,7,1,
        7,1,7,1,7,3,7,707,8,7,1,7,1,7,3,7,711,8,7,1,7,3,7,714,8,7,5,7,716,
        8,7,10,7,12,7,719,9,7,1,7,4,7,722,8,7,11,7,12,7,723,1,7,3,7,727,
        8,7,1,7,3,7,730,8,7,1,7,1,7,1,7,1,7,1,7,3,7,737,8,7,1,7,3,7,740,
        8,7,4,7,742,8,7,11,7,12,7,743,1,7,1,7,1,7,1,7,3,7,750,8,7,1,7,3,
        7,753,8,7,1,7,1,7,1,7,1,7,1,7,3,7,760,8,7,1,7,1,7,1,7,1,7,1,7,4,
        7,767,8,7,11,7,12,7,768,1,7,3,7,772,8,7,1,7,1,7,1,7,1,7,1,7,3,7,
        779,8,7,1,7,1,7,1,7,1,7,1,7,3,7,786,8,7,1,7,1,7,1,7,1,7,1,7,1,7,
        3,7,794,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,805,8,7,10,7,
        12,7,808,9,7,1,7,3,7,811,8,7,1,7,1,7,5,7,815,8,7,10,7,12,7,818,9,
        7,1,7,3,7,821,8,7,1,7,3,7,824,8,7,1,7,1,7,4,7,828,8,7,11,7,12,7,
        829,1,7,3,7,833,8,7,1,7,1,7,5,7,837,8,7,10,7,12,7,840,9,7,1,7,5,
        7,843,8,7,10,7,12,7,846,9,7,1,7,1,7,3,7,850,8,7,1,7,3,7,853,8,7,
        1,7,1,7,1,7,1,7,3,7,859,8,7,1,7,3,7,862,8,7,1,7,1,7,3,7,866,8,7,
        1,7,1,7,1,7,3,7,871,8,7,1,7,1,7,3,7,875,8,7,1,7,3,7,878,8,7,1,7,
        1,7,1,7,3,7,883,8,7,1,7,3,7,886,8,7,1,7,3,7,889,8,7,1,7,1,7,1,7,
        1,7,3,7,895,8,7,1,7,1,7,3,7,899,8,7,3,7,901,8,7,1,8,3,8,904,8,8,
        1,8,1,8,1,9,1,9,1,9,5,9,911,8,9,10,9,12,9,914,9,9,1,9,3,9,917,8,
        9,1,9,1,9,5,9,921,8,9,10,9,12,9,924,9,9,1,9,1,9,1,9,1,9,5,9,930,
        8,9,10,9,12,9,933,9,9,1,9,3,9,936,8,9,1,10,1,10,1,10,1,11,1,11,1,
        12,1,12,3,12,945,8,12,1,12,1,12,3,12,949,8,12,1,12,3,12,952,8,12,
        1,12,3,12,955,8,12,3,12,957,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,3,13,967,8,13,1,14,1,14,1,14,0,0,15,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,0,7,3,0,4,5,69,71,77,77,1,0,3,5,1,0,34,35,1,0,
        7,10,3,0,1,1,36,36,47,49,5,0,1,1,24,24,34,35,37,41,47,52,2,0,73,
        73,79,81,1194,0,30,1,0,0,0,2,37,1,0,0,0,4,88,1,0,0,0,6,137,1,0,0,
        0,8,148,1,0,0,0,10,170,1,0,0,0,12,172,1,0,0,0,14,900,1,0,0,0,16,
        903,1,0,0,0,18,916,1,0,0,0,20,937,1,0,0,0,22,940,1,0,0,0,24,956,
        1,0,0,0,26,966,1,0,0,0,28,968,1,0,0,0,30,34,3,2,1,0,31,33,3,14,7,
        0,32,31,1,0,0,0,33,36,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,1,1,
        0,0,0,36,34,1,0,0,0,37,38,5,2,0,0,38,41,5,78,0,0,39,40,5,21,0,0,
        40,42,3,8,4,0,41,39,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,45,5,
        18,0,0,44,43,1,0,0,0,44,45,1,0,0,0,45,49,1,0,0,0,46,48,3,4,2,0,47,
        46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,53,1,0,0,
        0,51,49,1,0,0,0,52,54,5,19,0,0,53,52,1,0,0,0,53,54,1,0,0,0,54,56,
        1,0,0,0,55,57,5,15,0,0,56,55,1,0,0,0,56,57,1,0,0,0,57,59,1,0,0,0,
        58,60,3,6,3,0,59,58,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,63,5,
        21,0,0,62,61,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,66,3,8,4,0,65,
        64,1,0,0,0,65,66,1,0,0,0,66,68,1,0,0,0,67,69,5,16,0,0,68,67,1,0,
        0,0,68,69,1,0,0,0,69,71,1,0,0,0,70,72,5,78,0,0,71,70,1,0,0,0,71,
        72,1,0,0,0,72,74,1,0,0,0,73,75,5,17,0,0,74,73,1,0,0,0,74,75,1,0,
        0,0,75,77,1,0,0,0,76,78,5,21,0,0,77,76,1,0,0,0,77,78,1,0,0,0,78,
        80,1,0,0,0,79,81,7,0,0,0,80,79,1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,
        0,82,84,5,21,0,0,83,82,1,0,0,0,83,84,1,0,0,0,84,86,1,0,0,0,85,87,
        3,14,7,0,86,85,1,0,0,0,86,87,1,0,0,0,87,3,1,0,0,0,88,90,7,1,0,0,
        89,91,5,78,0,0,90,89,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,93,5,
        21,0,0,93,95,3,14,7,0,94,96,5,20,0,0,95,94,1,0,0,0,95,96,1,0,0,0,
        96,5,1,0,0,0,97,98,5,78,0,0,98,111,5,16,0,0,99,101,5,25,0,0,100,
        99,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,102,104,3,14,7,0,103,
        105,5,25,0,0,104,103,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,
        108,5,22,0,0,107,106,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,
        100,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,
        114,1,0,0,0,113,111,1,0,0,0,114,138,5,17,0,0,115,116,5,78,0,0,116,
        122,5,16,0,0,117,118,5,78,0,0,118,119,5,21,0,0,119,121,5,78,0,0,
        120,117,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,
        123,125,1,0,0,0,124,122,1,0,0,0,125,138,5,17,0,0,126,133,5,16,0,
        0,127,129,5,79,0,0,128,130,5,22,0,0,129,128,1,0,0,0,129,130,1,0,
        0,0,130,132,1,0,0,0,131,127,1,0,0,0,132,135,1,0,0,0,133,131,1,0,
        0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,133,1,0,0,0,136,138,5,17,
        0,0,137,97,1,0,0,0,137,115,1,0,0,0,137,126,1,0,0,0,138,7,1,0,0,0,
        139,149,5,26,0,0,140,149,5,27,0,0,141,149,5,28,0,0,142,149,5,29,
        0,0,143,149,5,11,0,0,144,149,5,12,0,0,145,149,3,10,5,0,146,149,3,
        12,6,0,147,149,5,43,0,0,148,139,1,0,0,0,148,140,1,0,0,0,148,141,
        1,0,0,0,148,142,1,0,0,0,148,143,1,0,0,0,148,144,1,0,0,0,148,145,
        1,0,0,0,148,146,1,0,0,0,148,147,1,0,0,0,149,9,1,0,0,0,150,151,5,
        43,0,0,151,152,5,38,0,0,152,153,3,8,4,0,153,154,5,40,0,0,154,171,
        1,0,0,0,155,156,5,44,0,0,156,157,5,38,0,0,157,158,3,8,4,0,158,159,
        5,40,0,0,159,171,1,0,0,0,160,161,5,45,0,0,161,162,5,38,0,0,162,163,
        3,8,4,0,163,164,5,40,0,0,164,171,1,0,0,0,165,166,5,46,0,0,166,167,
        5,38,0,0,167,168,3,8,4,0,168,169,5,40,0,0,169,171,1,0,0,0,170,150,
        1,0,0,0,170,155,1,0,0,0,170,160,1,0,0,0,170,165,1,0,0,0,171,11,1,
        0,0,0,172,173,5,78,0,0,173,13,1,0,0,0,174,176,7,2,0,0,175,174,1,
        0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,179,3,18,9,0,178,180,3,
        14,7,0,179,178,1,0,0,0,179,180,1,0,0,0,180,901,1,0,0,0,181,183,3,
        20,10,0,182,184,3,14,7,0,183,182,1,0,0,0,183,184,1,0,0,0,184,901,
        1,0,0,0,185,186,5,30,0,0,186,901,3,14,7,0,187,188,5,31,0,0,188,901,
        3,14,7,0,189,190,5,32,0,0,190,901,3,14,7,0,191,193,5,33,0,0,192,
        194,3,14,7,0,193,192,1,0,0,0,193,194,1,0,0,0,194,901,1,0,0,0,195,
        200,3,26,13,0,196,197,5,23,0,0,197,199,5,78,0,0,198,196,1,0,0,0,
        199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,
        202,200,1,0,0,0,203,204,5,23,0,0,204,205,5,54,0,0,205,206,5,16,0,
        0,206,207,3,8,4,0,207,209,5,17,0,0,208,210,3,14,7,0,209,208,1,0,
        0,0,209,210,1,0,0,0,210,901,1,0,0,0,211,216,3,26,13,0,212,213,5,
        23,0,0,213,215,5,78,0,0,214,212,1,0,0,0,215,218,1,0,0,0,216,214,
        1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,220,
        5,23,0,0,220,221,5,53,0,0,221,222,5,16,0,0,222,223,3,8,4,0,223,225,
        5,17,0,0,224,226,3,14,7,0,225,224,1,0,0,0,225,226,1,0,0,0,226,901,
        1,0,0,0,227,232,3,26,13,0,228,229,5,23,0,0,229,231,5,78,0,0,230,
        228,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,
        235,1,0,0,0,234,232,1,0,0,0,235,236,5,23,0,0,236,237,5,55,0,0,237,
        238,5,16,0,0,238,239,3,8,4,0,239,241,5,17,0,0,240,242,3,14,7,0,241,
        240,1,0,0,0,241,242,1,0,0,0,242,901,1,0,0,0,243,245,3,26,13,0,244,
        243,1,0,0,0,244,245,1,0,0,0,245,250,1,0,0,0,246,247,5,23,0,0,247,
        249,5,78,0,0,248,246,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,
        251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,5,76,0,0,254,
        255,5,57,0,0,255,256,5,16,0,0,256,258,5,17,0,0,257,259,3,14,7,0,
        258,257,1,0,0,0,258,259,1,0,0,0,259,263,1,0,0,0,260,262,5,17,0,0,
        261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,
        264,901,1,0,0,0,265,263,1,0,0,0,266,268,3,26,13,0,267,266,1,0,0,
        0,267,268,1,0,0,0,268,273,1,0,0,0,269,270,5,23,0,0,270,272,5,78,
        0,0,271,269,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,
        0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,5,76,0,0,277,278,5,58,
        0,0,278,279,5,16,0,0,279,281,5,17,0,0,280,282,3,14,7,0,281,280,1,
        0,0,0,281,282,1,0,0,0,282,286,1,0,0,0,283,285,5,17,0,0,284,283,1,
        0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,901,1,
        0,0,0,288,286,1,0,0,0,289,291,3,26,13,0,290,289,1,0,0,0,290,291,
        1,0,0,0,291,296,1,0,0,0,292,293,5,23,0,0,293,295,5,78,0,0,294,292,
        1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,
        1,0,0,0,298,296,1,0,0,0,299,300,5,76,0,0,300,301,5,59,0,0,301,302,
        5,16,0,0,302,304,5,17,0,0,303,305,3,14,7,0,304,303,1,0,0,0,304,305,
        1,0,0,0,305,309,1,0,0,0,306,308,5,17,0,0,307,306,1,0,0,0,308,311,
        1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,901,1,0,0,0,311,309,
        1,0,0,0,312,314,5,76,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,315,
        1,0,0,0,315,316,5,60,0,0,316,317,5,16,0,0,317,318,3,14,7,0,318,320,
        5,17,0,0,319,321,3,14,7,0,320,319,1,0,0,0,320,321,1,0,0,0,321,325,
        1,0,0,0,322,324,5,17,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,
        1,0,0,0,325,326,1,0,0,0,326,901,1,0,0,0,327,325,1,0,0,0,328,330,
        5,76,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,
        5,61,0,0,332,333,5,16,0,0,333,334,3,14,7,0,334,336,5,17,0,0,335,
        337,3,14,7,0,336,335,1,0,0,0,336,337,1,0,0,0,337,341,1,0,0,0,338,
        340,5,17,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,
        342,1,0,0,0,342,901,1,0,0,0,343,341,1,0,0,0,344,346,5,76,0,0,345,
        344,1,0,0,0,345,346,1,0,0,0,346,350,1,0,0,0,347,349,5,16,0,0,348,
        347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,
        353,1,0,0,0,352,350,1,0,0,0,353,357,5,45,0,0,354,356,5,18,0,0,355,
        354,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,
        363,1,0,0,0,359,357,1,0,0,0,360,362,5,16,0,0,361,360,1,0,0,0,362,
        365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,378,1,0,0,0,365,
        363,1,0,0,0,366,368,5,25,0,0,367,366,1,0,0,0,367,368,1,0,0,0,368,
        369,1,0,0,0,369,371,3,14,7,0,370,372,5,25,0,0,371,370,1,0,0,0,371,
        372,1,0,0,0,372,374,1,0,0,0,373,375,5,22,0,0,374,373,1,0,0,0,374,
        375,1,0,0,0,375,377,1,0,0,0,376,367,1,0,0,0,377,380,1,0,0,0,378,
        376,1,0,0,0,378,379,1,0,0,0,379,384,1,0,0,0,380,378,1,0,0,0,381,
        383,5,19,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,
        385,1,0,0,0,385,390,1,0,0,0,386,384,1,0,0,0,387,389,5,17,0,0,388,
        387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,
        394,1,0,0,0,392,390,1,0,0,0,393,395,3,14,7,0,394,393,1,0,0,0,394,
        395,1,0,0,0,395,901,1,0,0,0,396,398,5,76,0,0,397,396,1,0,0,0,397,
        398,1,0,0,0,398,402,1,0,0,0,399,401,5,16,0,0,400,399,1,0,0,0,401,
        404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,
        402,1,0,0,0,405,409,5,62,0,0,406,408,5,18,0,0,407,406,1,0,0,0,408,
        411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,415,1,0,0,0,411,
        409,1,0,0,0,412,414,5,16,0,0,413,412,1,0,0,0,414,417,1,0,0,0,415,
        413,1,0,0,0,415,416,1,0,0,0,416,430,1,0,0,0,417,415,1,0,0,0,418,
        420,5,25,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,
        423,3,14,7,0,422,424,5,25,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,
        426,1,0,0,0,425,427,5,22,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,
        429,1,0,0,0,428,419,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,
        431,1,0,0,0,431,436,1,0,0,0,432,430,1,0,0,0,433,435,5,17,0,0,434,
        433,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
        442,1,0,0,0,438,436,1,0,0,0,439,441,5,19,0,0,440,439,1,0,0,0,441,
        444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,446,1,0,0,0,444,
        442,1,0,0,0,445,447,3,14,7,0,446,445,1,0,0,0,446,447,1,0,0,0,447,
        901,1,0,0,0,448,450,5,76,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,
        451,1,0,0,0,451,453,5,56,0,0,452,454,5,16,0,0,453,452,1,0,0,0,454,
        455,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,
        459,3,14,7,0,458,457,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,
        462,5,17,0,0,461,460,1,0,0,0,462,463,1,0,0,0,463,461,1,0,0,0,463,
        464,1,0,0,0,464,466,1,0,0,0,465,467,3,14,7,0,466,465,1,0,0,0,466,
        467,1,0,0,0,467,901,1,0,0,0,468,470,5,76,0,0,469,468,1,0,0,0,469,
        470,1,0,0,0,470,474,1,0,0,0,471,473,5,16,0,0,472,471,1,0,0,0,473,
        476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,
        474,1,0,0,0,477,478,5,46,0,0,478,491,5,18,0,0,479,481,5,25,0,0,480,
        479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,484,3,14,7,0,483,
        485,5,25,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,487,1,0,0,0,486,
        488,5,22,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,
        480,1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,
        494,1,0,0,0,493,491,1,0,0,0,494,498,5,19,0,0,495,497,5,17,0,0,496,
        495,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,
        502,1,0,0,0,500,498,1,0,0,0,501,503,3,14,7,0,502,501,1,0,0,0,502,
        503,1,0,0,0,503,901,1,0,0,0,504,506,5,76,0,0,505,504,1,0,0,0,505,
        506,1,0,0,0,506,510,1,0,0,0,507,509,5,16,0,0,508,507,1,0,0,0,509,
        512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,513,1,0,0,0,512,
        510,1,0,0,0,513,517,5,63,0,0,514,516,5,18,0,0,515,514,1,0,0,0,516,
        519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,523,1,0,0,0,519,
        517,1,0,0,0,520,522,5,16,0,0,521,520,1,0,0,0,522,525,1,0,0,0,523,
        521,1,0,0,0,523,524,1,0,0,0,524,538,1,0,0,0,525,523,1,0,0,0,526,
        528,5,25,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,
        531,3,14,7,0,530,532,5,25,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,
        534,1,0,0,0,533,535,5,22,0,0,534,533,1,0,0,0,534,535,1,0,0,0,535,
        537,1,0,0,0,536,527,1,0,0,0,537,540,1,0,0,0,538,536,1,0,0,0,538,
        539,1,0,0,0,539,544,1,0,0,0,540,538,1,0,0,0,541,543,5,19,0,0,542,
        541,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,
        550,1,0,0,0,546,544,1,0,0,0,547,549,5,17,0,0,548,547,1,0,0,0,549,
        552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,554,1,0,0,0,552,
        550,1,0,0,0,553,555,3,14,7,0,554,553,1,0,0,0,554,555,1,0,0,0,555,
        556,1,0,0,0,556,901,5,17,0,0,557,559,5,76,0,0,558,557,1,0,0,0,558,
        559,1,0,0,0,559,563,1,0,0,0,560,562,5,16,0,0,561,560,1,0,0,0,562,
        565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,
        563,1,0,0,0,566,570,5,43,0,0,567,569,5,16,0,0,568,567,1,0,0,0,569,
        572,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,576,1,0,0,0,572,
        570,1,0,0,0,573,575,5,18,0,0,574,573,1,0,0,0,575,578,1,0,0,0,576,
        574,1,0,0,0,576,577,1,0,0,0,577,591,1,0,0,0,578,576,1,0,0,0,579,
        581,5,25,0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,
        584,3,14,7,0,583,585,5,25,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,
        587,1,0,0,0,586,588,5,22,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,
        590,1,0,0,0,589,580,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,
        592,1,0,0,0,592,597,1,0,0,0,593,591,1,0,0,0,594,596,5,19,0,0,595,
        594,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,
        603,1,0,0,0,599,597,1,0,0,0,600,602,5,17,0,0,601,600,1,0,0,0,602,
        605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,607,1,0,0,0,605,
        603,1,0,0,0,606,608,3,14,7,0,607,606,1,0,0,0,607,608,1,0,0,0,608,
        901,1,0,0,0,609,611,5,76,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,
        615,1,0,0,0,612,614,5,16,0,0,613,612,1,0,0,0,614,617,1,0,0,0,615,
        613,1,0,0,0,615,616,1,0,0,0,616,618,1,0,0,0,617,615,1,0,0,0,618,
        622,5,44,0,0,619,621,5,16,0,0,620,619,1,0,0,0,621,624,1,0,0,0,622,
        620,1,0,0,0,622,623,1,0,0,0,623,628,1,0,0,0,624,622,1,0,0,0,625,
        627,5,18,0,0,626,625,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,
        629,1,0,0,0,629,643,1,0,0,0,630,628,1,0,0,0,631,633,5,25,0,0,632,
        631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,636,3,14,7,0,635,
        637,5,25,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,
        640,5,22,0,0,639,638,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,
        632,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,
        649,1,0,0,0,645,643,1,0,0,0,646,648,5,19,0,0,647,646,1,0,0,0,648,
        651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,655,1,0,0,0,651,
        649,1,0,0,0,652,654,5,17,0,0,653,652,1,0,0,0,654,657,1,0,0,0,655,
        653,1,0,0,0,655,656,1,0,0,0,656,659,1,0,0,0,657,655,1,0,0,0,658,
        660,3,14,7,0,659,658,1,0,0,0,659,660,1,0,0,0,660,901,1,0,0,0,661,
        662,5,76,0,0,662,664,5,64,0,0,663,665,5,16,0,0,664,663,1,0,0,0,665,
        666,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,680,1,0,0,0,668,
        670,5,25,0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,
        673,3,14,7,0,672,674,5,25,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,
        676,1,0,0,0,675,677,5,22,0,0,676,675,1,0,0,0,676,677,1,0,0,0,677,
        679,1,0,0,0,678,669,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,
        681,1,0,0,0,681,684,1,0,0,0,682,680,1,0,0,0,683,685,5,17,0,0,684,
        683,1,0,0,0,685,686,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,
        689,1,0,0,0,688,690,3,14,7,0,689,688,1,0,0,0,689,690,1,0,0,0,690,
        901,1,0,0,0,691,692,5,76,0,0,692,693,5,65,0,0,693,695,5,16,0,0,694,
        696,5,17,0,0,695,694,1,0,0,0,696,697,1,0,0,0,697,695,1,0,0,0,697,
        698,1,0,0,0,698,700,1,0,0,0,699,701,3,14,7,0,700,699,1,0,0,0,700,
        701,1,0,0,0,701,901,1,0,0,0,702,703,5,76,0,0,703,704,5,66,0,0,704,
        717,5,16,0,0,705,707,5,25,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,
        708,1,0,0,0,708,710,3,14,7,0,709,711,5,25,0,0,710,709,1,0,0,0,710,
        711,1,0,0,0,711,713,1,0,0,0,712,714,5,22,0,0,713,712,1,0,0,0,713,
        714,1,0,0,0,714,716,1,0,0,0,715,706,1,0,0,0,716,719,1,0,0,0,717,
        715,1,0,0,0,717,718,1,0,0,0,718,721,1,0,0,0,719,717,1,0,0,0,720,
        722,5,17,0,0,721,720,1,0,0,0,722,723,1,0,0,0,723,721,1,0,0,0,723,
        724,1,0,0,0,724,726,1,0,0,0,725,727,3,14,7,0,726,725,1,0,0,0,726,
        727,1,0,0,0,727,901,1,0,0,0,728,730,5,76,0,0,729,728,1,0,0,0,729,
        730,1,0,0,0,730,731,1,0,0,0,731,732,7,3,0,0,732,741,5,16,0,0,733,
        736,5,78,0,0,734,735,5,21,0,0,735,737,5,78,0,0,736,734,1,0,0,0,736,
        737,1,0,0,0,737,739,1,0,0,0,738,740,5,22,0,0,739,738,1,0,0,0,739,
        740,1,0,0,0,740,742,1,0,0,0,741,733,1,0,0,0,742,743,1,0,0,0,743,
        741,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,746,5,42,0,0,746,
        747,3,14,7,0,747,749,5,17,0,0,748,750,3,16,8,0,749,748,1,0,0,0,749,
        750,1,0,0,0,750,901,1,0,0,0,751,753,5,76,0,0,752,751,1,0,0,0,752,
        753,1,0,0,0,753,754,1,0,0,0,754,755,7,3,0,0,755,756,5,16,0,0,756,
        757,3,14,7,0,757,759,5,17,0,0,758,760,3,16,8,0,759,758,1,0,0,0,759,
        760,1,0,0,0,760,901,1,0,0,0,761,762,5,76,0,0,762,763,5,67,0,0,763,
        764,5,16,0,0,764,766,3,14,7,0,765,767,5,17,0,0,766,765,1,0,0,0,767,
        768,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,
        772,3,14,7,0,771,770,1,0,0,0,771,772,1,0,0,0,772,901,1,0,0,0,773,
        774,5,76,0,0,774,775,5,68,0,0,775,776,5,16,0,0,776,778,5,17,0,0,
        777,779,3,14,7,0,778,777,1,0,0,0,778,779,1,0,0,0,779,901,1,0,0,0,
        780,781,5,76,0,0,781,782,5,69,0,0,782,783,5,16,0,0,783,785,5,17,
        0,0,784,786,3,14,7,0,785,784,1,0,0,0,785,786,1,0,0,0,786,901,1,0,
        0,0,787,788,5,76,0,0,788,789,5,72,0,0,789,790,5,16,0,0,790,791,3,
        14,7,0,791,793,5,17,0,0,792,794,3,14,7,0,793,792,1,0,0,0,793,794,
        1,0,0,0,794,901,1,0,0,0,795,796,5,77,0,0,796,797,5,21,0,0,797,901,
        3,14,7,0,798,799,5,78,0,0,799,800,5,21,0,0,800,801,5,78,0,0,801,
        802,5,24,0,0,802,901,3,14,7,0,803,805,5,16,0,0,804,803,1,0,0,0,805,
        808,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,810,1,0,0,0,808,
        806,1,0,0,0,809,811,3,26,13,0,810,809,1,0,0,0,810,811,1,0,0,0,811,
        816,1,0,0,0,812,813,5,23,0,0,813,815,5,78,0,0,814,812,1,0,0,0,815,
        818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,820,1,0,0,0,818,
        816,1,0,0,0,819,821,3,22,11,0,820,819,1,0,0,0,820,821,1,0,0,0,821,
        823,1,0,0,0,822,824,3,26,13,0,823,822,1,0,0,0,823,824,1,0,0,0,824,
        827,1,0,0,0,825,826,5,23,0,0,826,828,5,78,0,0,827,825,1,0,0,0,828,
        829,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,
        833,3,14,7,0,832,831,1,0,0,0,832,833,1,0,0,0,833,901,1,0,0,0,834,
        838,3,26,13,0,835,837,5,23,0,0,836,835,1,0,0,0,837,840,1,0,0,0,838,
        836,1,0,0,0,838,839,1,0,0,0,839,844,1,0,0,0,840,838,1,0,0,0,841,
        843,5,78,0,0,842,841,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,
        845,1,0,0,0,845,847,1,0,0,0,846,844,1,0,0,0,847,849,3,6,3,0,848,
        850,3,22,11,0,849,848,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,
        853,3,14,7,0,852,851,1,0,0,0,852,853,1,0,0,0,853,901,1,0,0,0,854,
        855,5,76,0,0,855,901,3,14,7,0,856,858,5,79,0,0,857,859,3,14,7,0,
        858,857,1,0,0,0,858,859,1,0,0,0,859,901,1,0,0,0,860,862,5,76,0,0,
        861,860,1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,0,863,865,3,6,3,0,
        864,866,3,14,7,0,865,864,1,0,0,0,865,866,1,0,0,0,866,901,1,0,0,0,
        867,868,5,25,0,0,868,870,3,14,7,0,869,871,5,23,0,0,870,869,1,0,0,
        0,870,871,1,0,0,0,871,872,1,0,0,0,872,874,5,25,0,0,873,875,5,23,
        0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,877,1,0,0,0,876,878,3,14,
        7,0,877,876,1,0,0,0,877,878,1,0,0,0,878,901,1,0,0,0,879,880,5,14,
        0,0,880,901,3,14,7,0,881,883,5,34,0,0,882,881,1,0,0,0,882,883,1,
        0,0,0,883,885,1,0,0,0,884,886,5,35,0,0,885,884,1,0,0,0,885,886,1,
        0,0,0,886,888,1,0,0,0,887,889,5,78,0,0,888,887,1,0,0,0,888,889,1,
        0,0,0,889,890,1,0,0,0,890,891,5,15,0,0,891,901,3,14,7,0,892,894,
        3,22,11,0,893,895,3,24,12,0,894,893,1,0,0,0,894,895,1,0,0,0,895,
        901,1,0,0,0,896,898,3,26,13,0,897,899,3,14,7,0,898,897,1,0,0,0,898,
        899,1,0,0,0,899,901,1,0,0,0,900,175,1,0,0,0,900,181,1,0,0,0,900,
        185,1,0,0,0,900,187,1,0,0,0,900,189,1,0,0,0,900,191,1,0,0,0,900,
        195,1,0,0,0,900,211,1,0,0,0,900,227,1,0,0,0,900,244,1,0,0,0,900,
        267,1,0,0,0,900,290,1,0,0,0,900,313,1,0,0,0,900,329,1,0,0,0,900,
        345,1,0,0,0,900,397,1,0,0,0,900,449,1,0,0,0,900,469,1,0,0,0,900,
        505,1,0,0,0,900,558,1,0,0,0,900,610,1,0,0,0,900,661,1,0,0,0,900,
        691,1,0,0,0,900,702,1,0,0,0,900,729,1,0,0,0,900,752,1,0,0,0,900,
        761,1,0,0,0,900,773,1,0,0,0,900,780,1,0,0,0,900,787,1,0,0,0,900,
        795,1,0,0,0,900,798,1,0,0,0,900,806,1,0,0,0,900,834,1,0,0,0,900,
        854,1,0,0,0,900,856,1,0,0,0,900,861,1,0,0,0,900,867,1,0,0,0,900,
        879,1,0,0,0,900,882,1,0,0,0,900,892,1,0,0,0,900,896,1,0,0,0,901,
        15,1,0,0,0,902,904,7,2,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,
        1,0,0,0,905,906,3,14,7,0,906,17,1,0,0,0,907,912,3,26,13,0,908,909,
        5,23,0,0,909,911,5,78,0,0,910,908,1,0,0,0,911,914,1,0,0,0,912,910,
        1,0,0,0,912,913,1,0,0,0,913,917,1,0,0,0,914,912,1,0,0,0,915,917,
        5,79,0,0,916,907,1,0,0,0,916,915,1,0,0,0,917,922,1,0,0,0,918,919,
        5,23,0,0,919,921,5,78,0,0,920,918,1,0,0,0,921,924,1,0,0,0,922,920,
        1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,922,1,0,0,0,925,935,
        3,22,11,0,926,931,3,26,13,0,927,928,5,23,0,0,928,930,5,78,0,0,929,
        927,1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,
        936,1,0,0,0,933,931,1,0,0,0,934,936,5,79,0,0,935,926,1,0,0,0,935,
        934,1,0,0,0,936,19,1,0,0,0,937,938,7,4,0,0,938,939,3,14,7,0,939,
        21,1,0,0,0,940,941,7,5,0,0,941,23,1,0,0,0,942,957,5,79,0,0,943,945,
        5,25,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,948,
        5,78,0,0,947,949,5,16,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,951,
        1,0,0,0,950,952,5,17,0,0,951,950,1,0,0,0,951,952,1,0,0,0,952,954,
        1,0,0,0,953,955,5,25,0,0,954,953,1,0,0,0,954,955,1,0,0,0,955,957,
        1,0,0,0,956,942,1,0,0,0,956,944,1,0,0,0,957,25,1,0,0,0,958,967,3,
        28,14,0,959,967,5,6,0,0,960,967,3,6,3,0,961,962,5,16,0,0,962,963,
        3,14,7,0,963,964,5,17,0,0,964,967,1,0,0,0,965,967,5,78,0,0,966,958,
        1,0,0,0,966,959,1,0,0,0,966,960,1,0,0,0,966,961,1,0,0,0,966,965,
        1,0,0,0,967,27,1,0,0,0,968,969,7,6,0,0,969,29,1,0,0,0,186,34,41,
        44,49,53,56,59,62,65,68,71,74,77,80,83,86,90,95,100,104,107,111,
        122,129,133,137,148,170,175,179,183,193,200,209,216,225,232,241,
        244,250,258,263,267,273,281,286,290,296,304,309,313,320,325,329,
        336,341,345,350,357,363,367,371,374,378,384,390,394,397,402,409,
        415,419,423,426,430,436,442,446,449,455,458,463,466,469,474,480,
        484,487,491,498,502,505,510,517,523,527,531,534,538,544,550,554,
        558,563,570,576,580,584,587,591,597,603,607,610,615,622,628,632,
        636,639,643,649,655,659,666,669,673,676,680,686,689,697,700,706,
        710,713,717,723,726,729,736,739,743,749,752,759,768,771,778,785,
        793,806,810,816,820,823,829,832,838,844,849,852,858,861,865,870,
        874,877,882,885,888,894,898,900,903,912,916,922,931,935,944,948,
        951,954,956,966
    ]

class BOCLParser ( Parser ):

    grammarFileName = "BOCL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'*'", "'context'", "'inv'", "'pre'", 
                     "'post'", "'self'", "'forAll'", "'exists'", "'select'", 
                     "'collect'", "'OclAny'", "'OclVoid'", "<INVALID>", 
                     "'..'", "'::'", "'('", "')'", "'{'", "'}'", "';'", 
                     "':'", "','", "'.'", "'='", "'''", "'Boolean'", "'Integer'", 
                     "'Real'", "'String'", "'if'", "'then'", "'else'", "'endif'", 
                     "'and'", "'or'", "'not'", "'<>'", "'<'", "'<='", "'>'", 
                     "'>='", "'|'", "<INVALID>", "'Bag'", "'Sequence'", 
                     "'OrderedSet'", "'-'", "'+'", "'/'", "' '", "'xor'", 
                     "'implies'", "'oclAsType'", "'oclIsTypeOf'", "'oclIsKindOf'", 
                     "'allInstances'", "'isEmpty'", "'sum'", "'size'", "'includes'", 
                     "'excludes'", "'subSequence'", "'subOrderedSet'", "'prepend'", 
                     "'last'", "'append'", "'symmetricDifference'", "'first'", 
                     "'derive'", "'body'", "'init'", "'union'", "'null'", 
                     "'let'", "'in'", "<INVALID>", "'def'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "CONTEXT", "INV", "PRE", 
                      "POST", "SELF", "FORALL", "EXISTS", "SELECT", "COLLECT", 
                      "OCLANY", "OCLVOID", "WS", "DoubleDots", "DoubleCOLON", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "COLON", 
                      "COMMA", "DOT", "EQUAL", "SingleQuote", "BOOLEAN_TYPE", 
                      "INTEGER_TYPE", "REAL_TYPE", "STRING_TYPE", "IF", 
                      "THEN", "ELSE", "ENDIF", "AND", "OR", "NOT", "NOTEQUAL", 
                      "LT", "LE", "GT", "GE", "PIPE", "SET", "BAG", "SEQUENCE", 
                      "ORDEREDSET", "MINUS", "PLUS", "Divide", "EMPTYSTRING", 
                      "XOR", "IMPLIES", "OCLASTYPE", "OCLISTYPEOF", "OCLISKINDOF", 
                      "ALLINSTANCES", "ISEMPTY", "SUM", "SIZE", "INCLUDES", 
                      "EXCLUDES", "SUBSEQUENCE", "SUBORDEREDSET", "PREPEND", 
                      "LAST", "APPEND", "SYMMETRICDIFFERENCE", "FIRST", 
                      "DERIVE", "BODY", "Init", "UNION", "NULL", "LET", 
                      "IN", "Arrow", "Def", "ID", "NUMBER", "STRING_LITERAL", 
                      "BOOLEAN_LITERAL", "COMMENT", "LINE_COMMENT" ]

    RULE_oclFile = 0
    RULE_contextDeclaration = 1
    RULE_constraint = 2
    RULE_functionCall = 3
    RULE_type = 4
    RULE_collectionType = 5
    RULE_userDefinedType = 6
    RULE_expression = 7
    RULE_endExpression = 8
    RULE_binaryExpression = 9
    RULE_unaryExpression = 10
    RULE_operator = 11
    RULE_numberORUserDefined = 12
    RULE_primaryExpression = 13
    RULE_literal = 14

    ruleNames =  [ "oclFile", "contextDeclaration", "constraint", "functionCall", 
                   "type", "collectionType", "userDefinedType", "expression", 
                   "endExpression", "binaryExpression", "unaryExpression", 
                   "operator", "numberORUserDefined", "primaryExpression", 
                   "literal" ]

    EOF = Token.EOF
    T__0=1
    CONTEXT=2
    INV=3
    PRE=4
    POST=5
    SELF=6
    FORALL=7
    EXISTS=8
    SELECT=9
    COLLECT=10
    OCLANY=11
    OCLVOID=12
    WS=13
    DoubleDots=14
    DoubleCOLON=15
    LPAREN=16
    RPAREN=17
    LBRACE=18
    RBRACE=19
    SEMI=20
    COLON=21
    COMMA=22
    DOT=23
    EQUAL=24
    SingleQuote=25
    BOOLEAN_TYPE=26
    INTEGER_TYPE=27
    REAL_TYPE=28
    STRING_TYPE=29
    IF=30
    THEN=31
    ELSE=32
    ENDIF=33
    AND=34
    OR=35
    NOT=36
    NOTEQUAL=37
    LT=38
    LE=39
    GT=40
    GE=41
    PIPE=42
    SET=43
    BAG=44
    SEQUENCE=45
    ORDEREDSET=46
    MINUS=47
    PLUS=48
    Divide=49
    EMPTYSTRING=50
    XOR=51
    IMPLIES=52
    OCLASTYPE=53
    OCLISTYPEOF=54
    OCLISKINDOF=55
    ALLINSTANCES=56
    ISEMPTY=57
    SUM=58
    SIZE=59
    INCLUDES=60
    EXCLUDES=61
    SUBSEQUENCE=62
    SUBORDEREDSET=63
    PREPEND=64
    LAST=65
    APPEND=66
    SYMMETRICDIFFERENCE=67
    FIRST=68
    DERIVE=69
    BODY=70
    Init=71
    UNION=72
    NULL=73
    LET=74
    IN=75
    Arrow=76
    Def=77
    ID=78
    NUMBER=79
    STRING_LITERAL=80
    BOOLEAN_LITERAL=81
    COMMENT=82
    LINE_COMMENT=83

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OclFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contextDeclaration(self):
            return self.getTypedRuleContext(BOCLParser.ContextDeclarationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return BOCLParser.RULE_oclFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOclFile" ):
                listener.enterOclFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOclFile" ):
                listener.exitOclFile(self)




    def oclFile(self):

        localctx = BOCLParser.OclFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oclFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 30
            self.contextDeclaration()
            self.state = 34
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1071861110375594046) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 505) != 0):
                self.state = 31
                self.expression()
                self.state = 36
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BOCLParser.RULE_contextDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ContextExpContext(ContextDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ContextDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTEXT(self):
            return self.getToken(BOCLParser.CONTEXT, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COLON)
            else:
                return self.getToken(BOCLParser.COLON, i)
        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.TypeContext)
            else:
                return self.getTypedRuleContext(BOCLParser.TypeContext,i)

        def LBRACE(self):
            return self.getToken(BOCLParser.LBRACE, 0)
        def constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ConstraintContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ConstraintContext,i)

        def RBRACE(self):
            return self.getToken(BOCLParser.RBRACE, 0)
        def DoubleCOLON(self):
            return self.getToken(BOCLParser.DoubleCOLON, 0)
        def functionCall(self):
            return self.getTypedRuleContext(BOCLParser.FunctionCallContext,0)

        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)

        def DERIVE(self):
            return self.getToken(BOCLParser.DERIVE, 0)
        def BODY(self):
            return self.getToken(BOCLParser.BODY, 0)
        def Init(self):
            return self.getToken(BOCLParser.Init, 0)
        def PRE(self):
            return self.getToken(BOCLParser.PRE, 0)
        def POST(self):
            return self.getToken(BOCLParser.POST, 0)
        def Def(self):
            return self.getToken(BOCLParser.Def, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextExp" ):
                listener.enterContextExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextExp" ):
                listener.exitContextExp(self)



    def contextDeclaration(self):

        localctx = BOCLParser.ContextDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_contextDeclaration)
        self._la = 0 # Token type
        try:
            localctx = BOCLParser.ContextExpContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 37
            self.match(BOCLParser.CONTEXT)
            self.state = 38
            self.match(BOCLParser.ID)
            self.state = 41
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 39
                self.match(BOCLParser.COLON)
                self.state = 40
                self.type_()


            self.state = 44
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 43
                self.match(BOCLParser.LBRACE)


            self.state = 49
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 46
                    self.constraint() 
                self.state = 51
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 53
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 52
                self.match(BOCLParser.RBRACE)


            self.state = 56
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 55
                self.match(BOCLParser.DoubleCOLON)


            self.state = 59
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 58
                self.functionCall()


            self.state = 62
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 61
                self.match(BOCLParser.COLON)


            self.state = 65
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 64
                self.type_()


            self.state = 68
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 67
                self.match(BOCLParser.LPAREN)


            self.state = 71
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 70
                self.match(BOCLParser.ID)


            self.state = 74
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 73
                self.match(BOCLParser.RPAREN)


            self.state = 77
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 76
                self.match(BOCLParser.COLON)


            self.state = 80
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 79
                _la = self._input.LA(1)
                if not(_la==4 or _la==5 or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 263) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 83
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 82
                self.match(BOCLParser.COLON)


            self.state = 86
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 85
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(BOCLParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def INV(self):
            return self.getToken(BOCLParser.INV, 0)

        def PRE(self):
            return self.getToken(BOCLParser.PRE, 0)

        def POST(self):
            return self.getToken(BOCLParser.POST, 0)

        def ID(self):
            return self.getToken(BOCLParser.ID, 0)

        def SEMI(self):
            return self.getToken(BOCLParser.SEMI, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint" ):
                listener.enterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint" ):
                listener.exitConstraint(self)




    def constraint(self):

        localctx = BOCLParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 88
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 56) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 90
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 89
                self.match(BOCLParser.ID)


            self.state = 92
            self.match(BOCLParser.COLON)
            self.state = 93
            self.expression()
            self.state = 95
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 94
                self.match(BOCLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)

        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)


        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COLON)
            else:
                return self.getToken(BOCLParser.COLON, i)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.NUMBER)
            else:
                return self.getToken(BOCLParser.NUMBER, i)

        def getRuleIndex(self):
            return BOCLParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = BOCLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 97
                self.match(BOCLParser.ID)
                self.state = 98
                self.match(BOCLParser.LPAREN)
                self.state = 111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1071861110375594046) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 505) != 0):
                    self.state = 100
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                    if la_ == 1:
                        self.state = 99
                        self.match(BOCLParser.SingleQuote)


                    self.state = 102
                    self.expression()
                    self.state = 104
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                    if la_ == 1:
                        self.state = 103
                        self.match(BOCLParser.SingleQuote)


                    self.state = 107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 106
                        self.match(BOCLParser.COMMA)


                    self.state = 113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 114
                self.match(BOCLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 115
                self.match(BOCLParser.ID)
                self.state = 116
                self.match(BOCLParser.LPAREN)
                self.state = 122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 117
                    self.match(BOCLParser.ID)
                    self.state = 118
                    self.match(BOCLParser.COLON)
                    self.state = 119
                    self.match(BOCLParser.ID)
                    self.state = 124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 125
                self.match(BOCLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 126
                self.match(BOCLParser.LPAREN)
                self.state = 133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==79:
                    self.state = 127
                    self.match(BOCLParser.NUMBER)
                    self.state = 129
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 128
                        self.match(BOCLParser.COMMA)


                    self.state = 135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 136
                self.match(BOCLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_TYPE(self):
            return self.getToken(BOCLParser.BOOLEAN_TYPE, 0)

        def INTEGER_TYPE(self):
            return self.getToken(BOCLParser.INTEGER_TYPE, 0)

        def REAL_TYPE(self):
            return self.getToken(BOCLParser.REAL_TYPE, 0)

        def STRING_TYPE(self):
            return self.getToken(BOCLParser.STRING_TYPE, 0)

        def OCLANY(self):
            return self.getToken(BOCLParser.OCLANY, 0)

        def OCLVOID(self):
            return self.getToken(BOCLParser.OCLVOID, 0)

        def collectionType(self):
            return self.getTypedRuleContext(BOCLParser.CollectionTypeContext,0)


        def userDefinedType(self):
            return self.getTypedRuleContext(BOCLParser.UserDefinedTypeContext,0)


        def SET(self):
            return self.getToken(BOCLParser.SET, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = BOCLParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_type)
        try:
            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 139
                self.match(BOCLParser.BOOLEAN_TYPE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 140
                self.match(BOCLParser.INTEGER_TYPE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 141
                self.match(BOCLParser.REAL_TYPE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 142
                self.match(BOCLParser.STRING_TYPE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 143
                self.match(BOCLParser.OCLANY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 144
                self.match(BOCLParser.OCLVOID)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 145
                self.collectionType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 146
                self.userDefinedType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 147
                self.match(BOCLParser.SET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(BOCLParser.SET, 0)

        def LT(self):
            return self.getToken(BOCLParser.LT, 0)

        def type_(self):
            return self.getTypedRuleContext(BOCLParser.TypeContext,0)


        def GT(self):
            return self.getToken(BOCLParser.GT, 0)

        def BAG(self):
            return self.getToken(BOCLParser.BAG, 0)

        def SEQUENCE(self):
            return self.getToken(BOCLParser.SEQUENCE, 0)

        def ORDEREDSET(self):
            return self.getToken(BOCLParser.ORDEREDSET, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_collectionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionType" ):
                listener.enterCollectionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionType" ):
                listener.exitCollectionType(self)




    def collectionType(self):

        localctx = BOCLParser.CollectionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_collectionType)
        try:
            self.state = 170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 150
                self.match(BOCLParser.SET)
                self.state = 151
                self.match(BOCLParser.LT)
                self.state = 152
                self.type_()
                self.state = 153
                self.match(BOCLParser.GT)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 155
                self.match(BOCLParser.BAG)
                self.state = 156
                self.match(BOCLParser.LT)
                self.state = 157
                self.type_()
                self.state = 158
                self.match(BOCLParser.GT)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 3)
                self.state = 160
                self.match(BOCLParser.SEQUENCE)
                self.state = 161
                self.match(BOCLParser.LT)
                self.state = 162
                self.type_()
                self.state = 163
                self.match(BOCLParser.GT)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 165
                self.match(BOCLParser.ORDEREDSET)
                self.state = 166
                self.match(BOCLParser.LT)
                self.state = 167
                self.type_()
                self.state = 168
                self.match(BOCLParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(BOCLParser.ID, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_userDefinedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedType" ):
                listener.enterUserDefinedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedType" ):
                listener.exitUserDefinedType(self)




    def userDefinedType(self):

        localctx = BOCLParser.UserDefinedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_userDefinedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(BOCLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return BOCLParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ElseExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(BOCLParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseExp" ):
                listener.enterElseExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseExp" ):
                listener.exitElseExp(self)


    class ArrowexpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowexp" ):
                listener.enterArrowexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowexp" ):
                listener.exitArrowexp(self)


    class COLLECTIONContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def PIPE(self):
            return self.getToken(BOCLParser.PIPE, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)
        def FORALL(self):
            return self.getToken(BOCLParser.FORALL, 0)
        def EXISTS(self):
            return self.getToken(BOCLParser.EXISTS, 0)
        def SELECT(self):
            return self.getToken(BOCLParser.SELECT, 0)
        def COLLECT(self):
            return self.getToken(BOCLParser.COLLECT, 0)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def endExpression(self):
            return self.getTypedRuleContext(BOCLParser.EndExpressionContext,0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COLON)
            else:
                return self.getToken(BOCLParser.COLON, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOLLECTION" ):
                listener.enterCOLLECTION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOLLECTION" ):
                listener.exitCOLLECTION(self)


    class SETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(BOCLParser.SET, 0)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LBRACE)
            else:
                return self.getToken(BOCLParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RBRACE)
            else:
                return self.getToken(BOCLParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSET" ):
                listener.enterSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSET" ):
                listener.exitSET(self)


    class DefIDAssignmentexpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def COLON(self):
            return self.getToken(BOCLParser.COLON, 0)
        def EQUAL(self):
            return self.getToken(BOCLParser.EQUAL, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefIDAssignmentexpression" ):
                listener.enterDefIDAssignmentexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefIDAssignmentexpression" ):
                listener.exitDefIDAssignmentexpression(self)


    class PredefinedfunctionCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(BOCLParser.FunctionCallContext,0)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedfunctionCall" ):
                listener.enterPredefinedfunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedfunctionCall" ):
                listener.exitPredefinedfunctionCall(self)


    class UnaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.UnaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)


    class INCLUDESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INCLUDES(self):
            return self.getToken(BOCLParser.INCLUDES, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterINCLUDES" ):
                listener.enterINCLUDES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitINCLUDES" ):
                listener.exitINCLUDES(self)


    class ThenExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THEN(self):
            return self.getToken(BOCLParser.THEN, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThenExp" ):
                listener.enterThenExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThenExp" ):
                listener.exitThenExp(self)


    class SUBORDEREDSETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBORDEREDSET(self):
            return self.getToken(BOCLParser.SUBORDEREDSET, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LBRACE)
            else:
                return self.getToken(BOCLParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RBRACE)
            else:
                return self.getToken(BOCLParser.RBRACE, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUBORDEREDSET" ):
                listener.enterSUBORDEREDSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUBORDEREDSET" ):
                listener.exitSUBORDEREDSET(self)


    class PrimaryExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def operator(self):
            return self.getTypedRuleContext(BOCLParser.OperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExp" ):
                listener.enterPrimaryExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExp" ):
                listener.exitPrimaryExp(self)


    class OCLISKINDOFContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)
        def OCLISKINDOF(self):
            return self.getToken(BOCLParser.OCLISKINDOF, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(BOCLParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLISKINDOF" ):
                listener.enterOCLISKINDOF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLISKINDOF" ):
                listener.exitOCLISKINDOF(self)


    class NumberContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(BOCLParser.NUMBER, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)


    class DoubleCOLONsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DoubleCOLON(self):
            return self.getToken(BOCLParser.DoubleCOLON, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)

        def AND(self):
            return self.getToken(BOCLParser.AND, 0)
        def OR(self):
            return self.getToken(BOCLParser.OR, 0)
        def ID(self):
            return self.getToken(BOCLParser.ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleCOLONs" ):
                listener.enterDoubleCOLONs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleCOLONs" ):
                listener.exitDoubleCOLONs(self)


    class SYMMETRICDIFFERENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def SYMMETRICDIFFERENCE(self):
            return self.getToken(BOCLParser.SYMMETRICDIFFERENCE, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYMMETRICDIFFERENCE" ):
                listener.enterSYMMETRICDIFFERENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYMMETRICDIFFERENCE" ):
                listener.exitSYMMETRICDIFFERENCE(self)


    class SEQUENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEQUENCE(self):
            return self.getToken(BOCLParser.SEQUENCE, 0)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LBRACE)
            else:
                return self.getToken(BOCLParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RBRACE)
            else:
                return self.getToken(BOCLParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSEQUENCE" ):
                listener.enterSEQUENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSEQUENCE" ):
                listener.exitSEQUENCE(self)


    class ORDEREDSETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDEREDSET(self):
            return self.getToken(BOCLParser.ORDEREDSET, 0)
        def LBRACE(self):
            return self.getToken(BOCLParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(BOCLParser.RBRACE, 0)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterORDEREDSET" ):
                listener.enterORDEREDSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitORDEREDSET" ):
                listener.exitORDEREDSET(self)


    class DoubleDotsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DoubleDots(self):
            return self.getToken(BOCLParser.DoubleDots, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleDots" ):
                listener.enterDoubleDots(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleDots" ):
                listener.exitDoubleDots(self)


    class EXCLUDESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXCLUDES(self):
            return self.getToken(BOCLParser.EXCLUDES, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEXCLUDES" ):
                listener.enterEXCLUDES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEXCLUDES" ):
                listener.exitEXCLUDES(self)


    class DERIVEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def DERIVE(self):
            return self.getToken(BOCLParser.DERIVE, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDERIVE" ):
                listener.enterDERIVE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDERIVE" ):
                listener.exitDERIVE(self)


    class IDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterID" ):
                listener.enterID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitID" ):
                listener.exitID(self)


    class ALLINSTANCESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALLINSTANCES(self):
            return self.getToken(BOCLParser.ALLINSTANCES, 0)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterALLINSTANCES" ):
                listener.enterALLINSTANCES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitALLINSTANCES" ):
                listener.exitALLINSTANCES(self)


    class OpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operator(self):
            return self.getTypedRuleContext(BOCLParser.OperatorContext,0)

        def numberORUserDefined(self):
            return self.getTypedRuleContext(BOCLParser.NumberORUserDefinedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp" ):
                listener.enterOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp" ):
                listener.exitOp(self)


    class SUBSEQUENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSEQUENCE(self):
            return self.getToken(BOCLParser.SUBSEQUENCE, 0)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LBRACE)
            else:
                return self.getToken(BOCLParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RBRACE)
            else:
                return self.getToken(BOCLParser.RBRACE, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUBSEQUENCE" ):
                listener.enterSUBSEQUENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUBSEQUENCE" ):
                listener.exitSUBSEQUENCE(self)


    class SIZEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def SIZE(self):
            return self.getToken(BOCLParser.SIZE, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSIZE" ):
                listener.enterSIZE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSIZE" ):
                listener.exitSIZE(self)


    class SingleQuoteExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleQuoteExp" ):
                listener.enterSingleQuoteExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleQuoteExp" ):
                listener.exitSingleQuoteExp(self)


    class BAGContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BAG(self):
            return self.getToken(BOCLParser.BAG, 0)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LBRACE)
            else:
                return self.getToken(BOCLParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RBRACE)
            else:
                return self.getToken(BOCLParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBAG" ):
                listener.enterBAG(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBAG" ):
                listener.exitBAG(self)


    class OCLISTYPEOFContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)
        def OCLISTYPEOF(self):
            return self.getToken(BOCLParser.OCLISTYPEOF, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(BOCLParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLISTYPEOF" ):
                listener.enterOCLISTYPEOF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLISTYPEOF" ):
                listener.exitOCLISTYPEOF(self)


    class SUMContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def SUM(self):
            return self.getToken(BOCLParser.SUM, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUM" ):
                listener.enterSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUM" ):
                listener.exitSUM(self)


    class FIRSTContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def FIRST(self):
            return self.getToken(BOCLParser.FIRST, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFIRST" ):
                listener.enterFIRST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFIRST" ):
                listener.exitFIRST(self)


    class APPENDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def APPEND(self):
            return self.getToken(BOCLParser.APPEND, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAPPEND" ):
                listener.enterAPPEND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAPPEND" ):
                listener.exitAPPEND(self)


    class OCLASTYPEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)
        def OCLASTYPE(self):
            return self.getToken(BOCLParser.OCLASTYPE, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(BOCLParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLASTYPE" ):
                listener.enterOCLASTYPE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLASTYPE" ):
                listener.exitOCLASTYPE(self)


    class CollectionExpressionVariableContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)
        def FORALL(self):
            return self.getToken(BOCLParser.FORALL, 0)
        def EXISTS(self):
            return self.getToken(BOCLParser.EXISTS, 0)
        def SELECT(self):
            return self.getToken(BOCLParser.SELECT, 0)
        def COLLECT(self):
            return self.getToken(BOCLParser.COLLECT, 0)
        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def endExpression(self):
            return self.getTypedRuleContext(BOCLParser.EndExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionExpressionVariable" ):
                listener.enterCollectionExpressionVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionExpressionVariable" ):
                listener.exitCollectionExpressionVariable(self)


    class LASTContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def LAST(self):
            return self.getToken(BOCLParser.LAST, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLAST" ):
                listener.enterLAST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLAST" ):
                listener.exitLAST(self)


    class BinaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.BinaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)

        def AND(self):
            return self.getToken(BOCLParser.AND, 0)
        def OR(self):
            return self.getToken(BOCLParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)


    class IfExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(BOCLParser.IF, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExp" ):
                listener.enterIfExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExp" ):
                listener.exitIfExp(self)


    class EndIfExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENDIF(self):
            return self.getToken(BOCLParser.ENDIF, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndIfExp" ):
                listener.enterEndIfExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndIfExp" ):
                listener.exitEndIfExp(self)


    class ISEMPTYContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def ISEMPTY(self):
            return self.getToken(BOCLParser.ISEMPTY, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISEMPTY" ):
                listener.enterISEMPTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISEMPTY" ):
                listener.exitISEMPTY(self)


    class DefExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(BOCLParser.Def, 0)
        def COLON(self):
            return self.getToken(BOCLParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefExp" ):
                listener.enterDefExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefExp" ):
                listener.exitDefExp(self)


    class FuncCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(BOCLParser.FunctionCallContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)
        def operator(self):
            return self.getTypedRuleContext(BOCLParser.OperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncCall" ):
                listener.enterFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncCall" ):
                listener.exitFuncCall(self)


    class UNIONContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def UNION(self):
            return self.getToken(BOCLParser.UNION, 0)
        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUNION" ):
                listener.enterUNION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUNION" ):
                listener.exitUNION(self)


    class PREPENDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a BOCLParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(BOCLParser.Arrow, 0)
        def PREPEND(self):
            return self.getToken(BOCLParser.PREPEND, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.LPAREN)
            else:
                return self.getToken(BOCLParser.LPAREN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.RPAREN)
            else:
                return self.getToken(BOCLParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.COMMA)
            else:
                return self.getToken(BOCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPREPEND" ):
                listener.enterPREPEND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPREPEND" ):
                listener.exitPREPEND(self)



    def expression(self):

        localctx = BOCLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                localctx = BOCLParser.BinaryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==35:
                    self.state = 174
                    _la = self._input.LA(1)
                    if not(_la==34 or _la==35):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 177
                self.binaryExpression()
                self.state = 179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 178
                    self.expression()


                pass

            elif la_ == 2:
                localctx = BOCLParser.UnaryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 181
                self.unaryExpression()
                self.state = 183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 182
                    self.expression()


                pass

            elif la_ == 3:
                localctx = BOCLParser.IfExpContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 185
                self.match(BOCLParser.IF)
                self.state = 186
                self.expression()
                pass

            elif la_ == 4:
                localctx = BOCLParser.ThenExpContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 187
                self.match(BOCLParser.THEN)
                self.state = 188
                self.expression()
                pass

            elif la_ == 5:
                localctx = BOCLParser.ElseExpContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 189
                self.match(BOCLParser.ELSE)
                self.state = 190
                self.expression()
                pass

            elif la_ == 6:
                localctx = BOCLParser.EndIfExpContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 191
                self.match(BOCLParser.ENDIF)
                self.state = 193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 192
                    self.expression()


                pass

            elif la_ == 7:
                localctx = BOCLParser.OCLISTYPEOFContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 195
                self.primaryExpression()
                self.state = 200
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 196
                        self.match(BOCLParser.DOT)
                        self.state = 197
                        self.match(BOCLParser.ID) 
                    self.state = 202
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                self.state = 203
                self.match(BOCLParser.DOT)
                self.state = 204
                self.match(BOCLParser.OCLISTYPEOF)
                self.state = 205
                self.match(BOCLParser.LPAREN)
                self.state = 206
                self.type_()
                self.state = 207
                self.match(BOCLParser.RPAREN)
                self.state = 209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 208
                    self.expression()


                pass

            elif la_ == 8:
                localctx = BOCLParser.OCLASTYPEContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 211
                self.primaryExpression()
                self.state = 216
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 212
                        self.match(BOCLParser.DOT)
                        self.state = 213
                        self.match(BOCLParser.ID) 
                    self.state = 218
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 219
                self.match(BOCLParser.DOT)
                self.state = 220
                self.match(BOCLParser.OCLASTYPE)
                self.state = 221
                self.match(BOCLParser.LPAREN)
                self.state = 222
                self.type_()
                self.state = 223
                self.match(BOCLParser.RPAREN)
                self.state = 225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 224
                    self.expression()


                pass

            elif la_ == 9:
                localctx = BOCLParser.OCLISKINDOFContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 227
                self.primaryExpression()
                self.state = 232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 228
                        self.match(BOCLParser.DOT)
                        self.state = 229
                        self.match(BOCLParser.ID) 
                    self.state = 234
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 235
                self.match(BOCLParser.DOT)
                self.state = 236
                self.match(BOCLParser.OCLISKINDOF)
                self.state = 237
                self.match(BOCLParser.LPAREN)
                self.state = 238
                self.type_()
                self.state = 239
                self.match(BOCLParser.RPAREN)
                self.state = 241
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 240
                    self.expression()


                pass

            elif la_ == 10:
                localctx = BOCLParser.ISEMPTYContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6 or _la==16 or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 481) != 0):
                    self.state = 243
                    self.primaryExpression()


                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23:
                    self.state = 246
                    self.match(BOCLParser.DOT)
                    self.state = 247
                    self.match(BOCLParser.ID)
                    self.state = 252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 253
                self.match(BOCLParser.Arrow)
                self.state = 254
                self.match(BOCLParser.ISEMPTY)
                self.state = 255
                self.match(BOCLParser.LPAREN)
                self.state = 256
                self.match(BOCLParser.RPAREN)
                self.state = 258
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 257
                    self.expression()


                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 260
                        self.match(BOCLParser.RPAREN) 
                    self.state = 265
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                pass

            elif la_ == 11:
                localctx = BOCLParser.SUMContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6 or _la==16 or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 481) != 0):
                    self.state = 266
                    self.primaryExpression()


                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23:
                    self.state = 269
                    self.match(BOCLParser.DOT)
                    self.state = 270
                    self.match(BOCLParser.ID)
                    self.state = 275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 276
                self.match(BOCLParser.Arrow)
                self.state = 277
                self.match(BOCLParser.SUM)
                self.state = 278
                self.match(BOCLParser.LPAREN)
                self.state = 279
                self.match(BOCLParser.RPAREN)
                self.state = 281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 280
                    self.expression()


                self.state = 286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 283
                        self.match(BOCLParser.RPAREN) 
                    self.state = 288
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass

            elif la_ == 12:
                localctx = BOCLParser.SIZEContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6 or _la==16 or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 481) != 0):
                    self.state = 289
                    self.primaryExpression()


                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23:
                    self.state = 292
                    self.match(BOCLParser.DOT)
                    self.state = 293
                    self.match(BOCLParser.ID)
                    self.state = 298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 299
                self.match(BOCLParser.Arrow)
                self.state = 300
                self.match(BOCLParser.SIZE)
                self.state = 301
                self.match(BOCLParser.LPAREN)
                self.state = 302
                self.match(BOCLParser.RPAREN)
                self.state = 304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 303
                    self.expression()


                self.state = 309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 306
                        self.match(BOCLParser.RPAREN) 
                    self.state = 311
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                pass

            elif la_ == 13:
                localctx = BOCLParser.INCLUDESContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 312
                    self.match(BOCLParser.Arrow)


                self.state = 315
                self.match(BOCLParser.INCLUDES)
                self.state = 316
                self.match(BOCLParser.LPAREN)
                self.state = 317
                self.expression()
                self.state = 318
                self.match(BOCLParser.RPAREN)
                self.state = 320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 319
                    self.expression()


                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 322
                        self.match(BOCLParser.RPAREN) 
                    self.state = 327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                pass

            elif la_ == 14:
                localctx = BOCLParser.EXCLUDESContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 328
                    self.match(BOCLParser.Arrow)


                self.state = 331
                self.match(BOCLParser.EXCLUDES)
                self.state = 332
                self.match(BOCLParser.LPAREN)
                self.state = 333
                self.expression()
                self.state = 334
                self.match(BOCLParser.RPAREN)
                self.state = 336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 335
                    self.expression()


                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 338
                        self.match(BOCLParser.RPAREN) 
                    self.state = 343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                pass

            elif la_ == 15:
                localctx = BOCLParser.SEQUENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 344
                    self.match(BOCLParser.Arrow)


                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 347
                    self.match(BOCLParser.LPAREN)
                    self.state = 352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 353
                self.match(BOCLParser.SEQUENCE)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18:
                    self.state = 354
                    self.match(BOCLParser.LBRACE)
                    self.state = 359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 360
                        self.match(BOCLParser.LPAREN) 
                    self.state = 365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

                self.state = 378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 367
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                        if la_ == 1:
                            self.state = 366
                            self.match(BOCLParser.SingleQuote)


                        self.state = 369
                        self.expression()
                        self.state = 371
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                        if la_ == 1:
                            self.state = 370
                            self.match(BOCLParser.SingleQuote)


                        self.state = 374
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                        if la_ == 1:
                            self.state = 373
                            self.match(BOCLParser.COMMA)

                 
                    self.state = 380
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                self.state = 384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 381
                        self.match(BOCLParser.RBRACE) 
                    self.state = 386
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 387
                        self.match(BOCLParser.RPAREN) 
                    self.state = 392
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                self.state = 394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 393
                    self.expression()


                pass

            elif la_ == 16:
                localctx = BOCLParser.SUBSEQUENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 396
                    self.match(BOCLParser.Arrow)


                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 399
                    self.match(BOCLParser.LPAREN)
                    self.state = 404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 405
                self.match(BOCLParser.SUBSEQUENCE)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18:
                    self.state = 406
                    self.match(BOCLParser.LBRACE)
                    self.state = 411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 412
                        self.match(BOCLParser.LPAREN) 
                    self.state = 417
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 419
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                        if la_ == 1:
                            self.state = 418
                            self.match(BOCLParser.SingleQuote)


                        self.state = 421
                        self.expression()
                        self.state = 423
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                        if la_ == 1:
                            self.state = 422
                            self.match(BOCLParser.SingleQuote)


                        self.state = 426
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                        if la_ == 1:
                            self.state = 425
                            self.match(BOCLParser.COMMA)

                 
                    self.state = 432
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 436
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 433
                        self.match(BOCLParser.RPAREN) 
                    self.state = 438
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 439
                        self.match(BOCLParser.RBRACE) 
                    self.state = 444
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.expression()


                pass

            elif la_ == 17:
                localctx = BOCLParser.ALLINSTANCESContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 448
                    self.match(BOCLParser.Arrow)


                self.state = 451
                self.match(BOCLParser.ALLINSTANCES)
                self.state = 453 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 452
                        self.match(BOCLParser.LPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 455 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1071861110375594046) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 505) != 0):
                    self.state = 457
                    self.expression()


                self.state = 461 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 460
                        self.match(BOCLParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 463 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                self.state = 466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 465
                    self.expression()


                pass

            elif la_ == 18:
                localctx = BOCLParser.ORDEREDSETContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 468
                    self.match(BOCLParser.Arrow)


                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 471
                    self.match(BOCLParser.LPAREN)
                    self.state = 476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 477
                self.match(BOCLParser.ORDEREDSET)
                self.state = 478
                self.match(BOCLParser.LBRACE)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1071861110375594046) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 505) != 0):
                    self.state = 480
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        self.state = 479
                        self.match(BOCLParser.SingleQuote)


                    self.state = 482
                    self.expression()
                    self.state = 484
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 483
                        self.match(BOCLParser.SingleQuote)


                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 486
                        self.match(BOCLParser.COMMA)


                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 494
                self.match(BOCLParser.RBRACE)
                self.state = 498
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 495
                        self.match(BOCLParser.RPAREN) 
                    self.state = 500
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 502
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 501
                    self.expression()


                pass

            elif la_ == 19:
                localctx = BOCLParser.SUBORDEREDSETContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 504
                    self.match(BOCLParser.Arrow)


                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 507
                    self.match(BOCLParser.LPAREN)
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 513
                self.match(BOCLParser.SUBORDEREDSET)
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18:
                    self.state = 514
                    self.match(BOCLParser.LBRACE)
                    self.state = 519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 520
                        self.match(BOCLParser.LPAREN) 
                    self.state = 525
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 527
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 526
                            self.match(BOCLParser.SingleQuote)


                        self.state = 529
                        self.expression()
                        self.state = 531
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                        if la_ == 1:
                            self.state = 530
                            self.match(BOCLParser.SingleQuote)


                        self.state = 534
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==22:
                            self.state = 533
                            self.match(BOCLParser.COMMA)

                 
                    self.state = 540
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==19:
                    self.state = 541
                    self.match(BOCLParser.RBRACE)
                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 547
                        self.match(BOCLParser.RPAREN) 
                    self.state = 552
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1071861110375594046) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 505) != 0):
                    self.state = 553
                    self.expression()


                self.state = 556
                self.match(BOCLParser.RPAREN)
                pass

            elif la_ == 20:
                localctx = BOCLParser.SETContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 557
                    self.match(BOCLParser.Arrow)


                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 560
                    self.match(BOCLParser.LPAREN)
                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 566
                self.match(BOCLParser.SET)
                self.state = 570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 567
                        self.match(BOCLParser.LPAREN) 
                    self.state = 572
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18:
                    self.state = 573
                    self.match(BOCLParser.LBRACE)
                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 580
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                        if la_ == 1:
                            self.state = 579
                            self.match(BOCLParser.SingleQuote)


                        self.state = 582
                        self.expression()
                        self.state = 584
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                        if la_ == 1:
                            self.state = 583
                            self.match(BOCLParser.SingleQuote)


                        self.state = 587
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                        if la_ == 1:
                            self.state = 586
                            self.match(BOCLParser.COMMA)

                 
                    self.state = 593
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                self.state = 597
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 594
                        self.match(BOCLParser.RBRACE) 
                    self.state = 599
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 600
                        self.match(BOCLParser.RPAREN) 
                    self.state = 605
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                self.state = 607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 606
                    self.expression()


                pass

            elif la_ == 21:
                localctx = BOCLParser.BAGContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 609
                    self.match(BOCLParser.Arrow)


                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 612
                    self.match(BOCLParser.LPAREN)
                    self.state = 617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 618
                self.match(BOCLParser.BAG)
                self.state = 622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 619
                        self.match(BOCLParser.LPAREN) 
                    self.state = 624
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18:
                    self.state = 625
                    self.match(BOCLParser.LBRACE)
                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 643
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 632
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                        if la_ == 1:
                            self.state = 631
                            self.match(BOCLParser.SingleQuote)


                        self.state = 634
                        self.expression()
                        self.state = 636
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                        if la_ == 1:
                            self.state = 635
                            self.match(BOCLParser.SingleQuote)


                        self.state = 639
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                        if la_ == 1:
                            self.state = 638
                            self.match(BOCLParser.COMMA)

                 
                    self.state = 645
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                self.state = 649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 646
                        self.match(BOCLParser.RBRACE) 
                    self.state = 651
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                self.state = 655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 652
                        self.match(BOCLParser.RPAREN) 
                    self.state = 657
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                self.state = 659
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 658
                    self.expression()


                pass

            elif la_ == 22:
                localctx = BOCLParser.PREPENDContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 661
                self.match(BOCLParser.Arrow)
                self.state = 662
                self.match(BOCLParser.PREPEND)
                self.state = 664 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 663
                        self.match(BOCLParser.LPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 666 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1071861110375594046) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 505) != 0):
                    self.state = 669
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        self.state = 668
                        self.match(BOCLParser.SingleQuote)


                    self.state = 671
                    self.expression()
                    self.state = 673
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                    if la_ == 1:
                        self.state = 672
                        self.match(BOCLParser.SingleQuote)


                    self.state = 676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 675
                        self.match(BOCLParser.COMMA)


                    self.state = 682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 684 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 683
                        self.match(BOCLParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 686 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.expression()


                pass

            elif la_ == 23:
                localctx = BOCLParser.LASTContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 691
                self.match(BOCLParser.Arrow)
                self.state = 692
                self.match(BOCLParser.LAST)
                self.state = 693
                self.match(BOCLParser.LPAREN)
                self.state = 695 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 694
                        self.match(BOCLParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 697 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 699
                    self.expression()


                pass

            elif la_ == 24:
                localctx = BOCLParser.APPENDContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 702
                self.match(BOCLParser.Arrow)
                self.state = 703
                self.match(BOCLParser.APPEND)
                self.state = 704
                self.match(BOCLParser.LPAREN)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1071861110375594046) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 505) != 0):
                    self.state = 706
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        self.state = 705
                        self.match(BOCLParser.SingleQuote)


                    self.state = 708
                    self.expression()
                    self.state = 710
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                    if la_ == 1:
                        self.state = 709
                        self.match(BOCLParser.SingleQuote)


                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 712
                        self.match(BOCLParser.COMMA)


                    self.state = 719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 721 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 720
                        self.match(BOCLParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 723 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 725
                    self.expression()


                pass

            elif la_ == 25:
                localctx = BOCLParser.COLLECTIONContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 728
                    self.match(BOCLParser.Arrow)


                self.state = 731
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1920) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 732
                self.match(BOCLParser.LPAREN)
                self.state = 741 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 733
                    self.match(BOCLParser.ID)
                    self.state = 736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 734
                        self.match(BOCLParser.COLON)
                        self.state = 735
                        self.match(BOCLParser.ID)


                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==22:
                        self.state = 738
                        self.match(BOCLParser.COMMA)


                    self.state = 743 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==78):
                        break

                self.state = 745
                self.match(BOCLParser.PIPE)
                self.state = 746
                self.expression()
                self.state = 747
                self.match(BOCLParser.RPAREN)
                self.state = 749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 748
                    self.endExpression()


                pass

            elif la_ == 26:
                localctx = BOCLParser.CollectionExpressionVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 751
                    self.match(BOCLParser.Arrow)


                self.state = 754
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1920) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 755
                self.match(BOCLParser.LPAREN)
                self.state = 756
                self.expression()
                self.state = 757
                self.match(BOCLParser.RPAREN)
                self.state = 759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 758
                    self.endExpression()


                pass

            elif la_ == 27:
                localctx = BOCLParser.SYMMETRICDIFFERENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 761
                self.match(BOCLParser.Arrow)
                self.state = 762
                self.match(BOCLParser.SYMMETRICDIFFERENCE)
                self.state = 763
                self.match(BOCLParser.LPAREN)
                self.state = 764
                self.expression()
                self.state = 766 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 765
                        self.match(BOCLParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 768 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                self.state = 771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 770
                    self.expression()


                pass

            elif la_ == 28:
                localctx = BOCLParser.FIRSTContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 773
                self.match(BOCLParser.Arrow)
                self.state = 774
                self.match(BOCLParser.FIRST)
                self.state = 775
                self.match(BOCLParser.LPAREN)
                self.state = 776
                self.match(BOCLParser.RPAREN)
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 777
                    self.expression()


                pass

            elif la_ == 29:
                localctx = BOCLParser.DERIVEContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 780
                self.match(BOCLParser.Arrow)
                self.state = 781
                self.match(BOCLParser.DERIVE)
                self.state = 782
                self.match(BOCLParser.LPAREN)
                self.state = 783
                self.match(BOCLParser.RPAREN)
                self.state = 785
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 784
                    self.expression()


                pass

            elif la_ == 30:
                localctx = BOCLParser.UNIONContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 787
                self.match(BOCLParser.Arrow)
                self.state = 788
                self.match(BOCLParser.UNION)
                self.state = 789
                self.match(BOCLParser.LPAREN)
                self.state = 790
                self.expression()
                self.state = 791
                self.match(BOCLParser.RPAREN)
                self.state = 793
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 792
                    self.expression()


                pass

            elif la_ == 31:
                localctx = BOCLParser.DefExpContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 795
                self.match(BOCLParser.Def)
                self.state = 796
                self.match(BOCLParser.COLON)
                self.state = 797
                self.expression()
                pass

            elif la_ == 32:
                localctx = BOCLParser.DefIDAssignmentexpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 798
                self.match(BOCLParser.ID)
                self.state = 799
                self.match(BOCLParser.COLON)
                self.state = 800
                self.match(BOCLParser.ID)
                self.state = 801
                self.match(BOCLParser.EQUAL)
                self.state = 802
                self.expression()
                pass

            elif la_ == 33:
                localctx = BOCLParser.PrimaryExpContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 803
                        self.match(BOCLParser.LPAREN) 
                    self.state = 808
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 809
                    self.primaryExpression()


                self.state = 816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 812
                        self.match(BOCLParser.DOT)
                        self.state = 813
                        self.match(BOCLParser.ID) 
                    self.state = 818
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8870773930328066) != 0):
                    self.state = 819
                    self.operator()


                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6 or _la==16 or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 481) != 0):
                    self.state = 822
                    self.primaryExpression()


                self.state = 827 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 825
                        self.match(BOCLParser.DOT)
                        self.state = 826
                        self.match(BOCLParser.ID)

                    else:
                        raise NoViableAltException(self)
                    self.state = 829 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                self.state = 832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 831
                    self.expression()


                pass

            elif la_ == 34:
                localctx = BOCLParser.FuncCallContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 834
                self.primaryExpression()
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==23:
                    self.state = 835
                    self.match(BOCLParser.DOT)
                    self.state = 840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 841
                        self.match(BOCLParser.ID) 
                    self.state = 846
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                self.state = 847
                self.functionCall()
                self.state = 849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 848
                    self.operator()


                self.state = 852
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 851
                    self.expression()


                pass

            elif la_ == 35:
                localctx = BOCLParser.ArrowexpContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 854
                self.match(BOCLParser.Arrow)
                self.state = 855
                self.expression()
                pass

            elif la_ == 36:
                localctx = BOCLParser.NumberContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 856
                self.match(BOCLParser.NUMBER)
                self.state = 858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 857
                    self.expression()


                pass

            elif la_ == 37:
                localctx = BOCLParser.PredefinedfunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 860
                    self.match(BOCLParser.Arrow)


                self.state = 863
                self.functionCall()
                self.state = 865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 864
                    self.expression()


                pass

            elif la_ == 38:
                localctx = BOCLParser.SingleQuoteExpContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 867
                self.match(BOCLParser.SingleQuote)
                self.state = 868
                self.expression()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 869
                    self.match(BOCLParser.DOT)


                self.state = 872
                self.match(BOCLParser.SingleQuote)
                self.state = 874
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 873
                    self.match(BOCLParser.DOT)


                self.state = 877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 876
                    self.expression()


                pass

            elif la_ == 39:
                localctx = BOCLParser.DoubleDotsContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 879
                self.match(BOCLParser.DoubleDots)
                self.state = 880
                self.expression()
                pass

            elif la_ == 40:
                localctx = BOCLParser.DoubleCOLONsContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 881
                    self.match(BOCLParser.AND)


                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 884
                    self.match(BOCLParser.OR)


                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 887
                    self.match(BOCLParser.ID)


                self.state = 890
                self.match(BOCLParser.DoubleCOLON)
                self.state = 891
                self.expression()
                pass

            elif la_ == 41:
                localctx = BOCLParser.OpContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 892
                self.operator()
                self.state = 894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 893
                    self.numberORUserDefined()


                pass

            elif la_ == 42:
                localctx = BOCLParser.IDContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 896
                self.primaryExpression()
                self.state = 898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 897
                    self.expression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def AND(self):
            return self.getToken(BOCLParser.AND, 0)

        def OR(self):
            return self.getToken(BOCLParser.OR, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_endExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndExpression" ):
                listener.enterEndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndExpression" ):
                listener.exitEndExpression(self)




    def endExpression(self):

        localctx = BOCLParser.EndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_endExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 902
                _la = self._input.LA(1)
                if not(_la==34 or _la==35):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 905
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operator(self):
            return self.getTypedRuleContext(BOCLParser.OperatorContext,0)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.NUMBER)
            else:
                return self.getToken(BOCLParser.NUMBER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.DOT)
            else:
                return self.getToken(BOCLParser.DOT, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.ID)
            else:
                return self.getToken(BOCLParser.ID, i)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BOCLParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(BOCLParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return BOCLParser.RULE_binaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpression" ):
                listener.enterBinaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpression" ):
                listener.exitBinaryExpression(self)




    def binaryExpression(self):

        localctx = BOCLParser.BinaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_binaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 907
                self.primaryExpression()
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 908
                        self.match(BOCLParser.DOT)
                        self.state = 909
                        self.match(BOCLParser.ID) 
                    self.state = 914
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

                pass

            elif la_ == 2:
                self.state = 915
                self.match(BOCLParser.NUMBER)
                pass


            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23:
                self.state = 918
                self.match(BOCLParser.DOT)
                self.state = 919
                self.match(BOCLParser.ID)
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 925
            self.operator()
            self.state = 935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 926
                self.primaryExpression()
                self.state = 931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 927
                        self.match(BOCLParser.DOT)
                        self.state = 928
                        self.match(BOCLParser.ID) 
                    self.state = 933
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                pass

            elif la_ == 2:
                self.state = 934
                self.match(BOCLParser.NUMBER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def NOT(self):
            return self.getToken(BOCLParser.NOT, 0)

        def MINUS(self):
            return self.getToken(BOCLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(BOCLParser.PLUS, 0)

        def Divide(self):
            return self.getToken(BOCLParser.Divide, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = BOCLParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 985231137964034) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 938
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(BOCLParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(BOCLParser.NOTEQUAL, 0)

        def LT(self):
            return self.getToken(BOCLParser.LT, 0)

        def LE(self):
            return self.getToken(BOCLParser.LE, 0)

        def GT(self):
            return self.getToken(BOCLParser.GT, 0)

        def GE(self):
            return self.getToken(BOCLParser.GE, 0)

        def PLUS(self):
            return self.getToken(BOCLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(BOCLParser.MINUS, 0)

        def EMPTYSTRING(self):
            return self.getToken(BOCLParser.EMPTYSTRING, 0)

        def Divide(self):
            return self.getToken(BOCLParser.Divide, 0)

        def AND(self):
            return self.getToken(BOCLParser.AND, 0)

        def OR(self):
            return self.getToken(BOCLParser.OR, 0)

        def XOR(self):
            return self.getToken(BOCLParser.XOR, 0)

        def IMPLIES(self):
            return self.getToken(BOCLParser.IMPLIES, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = BOCLParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8870773930328066) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberORUserDefinedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(BOCLParser.NUMBER, 0)

        def ID(self):
            return self.getToken(BOCLParser.ID, 0)

        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(BOCLParser.SingleQuote)
            else:
                return self.getToken(BOCLParser.SingleQuote, i)

        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_numberORUserDefined

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberORUserDefined" ):
                listener.enterNumberORUserDefined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberORUserDefined" ):
                listener.exitNumberORUserDefined(self)




    def numberORUserDefined(self):

        localctx = BOCLParser.NumberORUserDefinedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_numberORUserDefined)
        self._la = 0 # Token type
        try:
            self.state = 956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.match(BOCLParser.NUMBER)
                pass
            elif token in [25, 78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 943
                    self.match(BOCLParser.SingleQuote)


                self.state = 946
                self.match(BOCLParser.ID)
                self.state = 948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 947
                    self.match(BOCLParser.LPAREN)


                self.state = 951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 950
                    self.match(BOCLParser.RPAREN)


                self.state = 954
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 953
                    self.match(BOCLParser.SingleQuote)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(BOCLParser.LiteralContext,0)


        def SELF(self):
            return self.getToken(BOCLParser.SELF, 0)

        def functionCall(self):
            return self.getTypedRuleContext(BOCLParser.FunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(BOCLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BOCLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BOCLParser.RPAREN, 0)

        def ID(self):
            return self.getToken(BOCLParser.ID, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = BOCLParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_primaryExpression)
        try:
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 958
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 959
                self.match(BOCLParser.SELF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 960
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 961
                self.match(BOCLParser.LPAREN)
                self.state = 962
                self.expression()
                self.state = 963
                self.match(BOCLParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 965
                self.match(BOCLParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(BOCLParser.NUMBER, 0)

        def STRING_LITERAL(self):
            return self.getToken(BOCLParser.STRING_LITERAL, 0)

        def BOOLEAN_LITERAL(self):
            return self.getToken(BOCLParser.BOOLEAN_LITERAL, 0)

        def NULL(self):
            return self.getToken(BOCLParser.NULL, 0)

        def getRuleIndex(self):
            return BOCLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = BOCLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & 449) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





